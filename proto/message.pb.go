// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.10.0
// source: message.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CastCmd int32

const (
	CastCmd_GET_EFFECT_RESULT      CastCmd = 0
	CastCmd_GET_DRAW_PHASE_RESULT  CastCmd = 1
	CastCmd_GET_MOVE_PHASE_RESULT  CastCmd = 2
	CastCmd_GET_ATK_PHASE_RESULT   CastCmd = 3
	CastCmd_GET_DEF_PHASE_RESULT   CastCmd = 4
	CastCmd_GET_INSTANCE_CARD      CastCmd = 5
	CastCmd_GET_GAMESET_RESULT     CastCmd = 6
	CastCmd_INSTANCE_DAMAGE        CastCmd = 7
	CastCmd_INSTANCE_STATUS_CHANGE CastCmd = 8
)

// Enum value maps for CastCmd.
var (
	CastCmd_name = map[int32]string{
		0: "GET_EFFECT_RESULT",
		1: "GET_DRAW_PHASE_RESULT",
		2: "GET_MOVE_PHASE_RESULT",
		3: "GET_ATK_PHASE_RESULT",
		4: "GET_DEF_PHASE_RESULT",
		5: "GET_INSTANCE_CARD",
		6: "GET_GAMESET_RESULT",
		7: "INSTANCE_DAMAGE",
		8: "INSTANCE_STATUS_CHANGE",
	}
	CastCmd_value = map[string]int32{
		"GET_EFFECT_RESULT":      0,
		"GET_DRAW_PHASE_RESULT":  1,
		"GET_MOVE_PHASE_RESULT":  2,
		"GET_ATK_PHASE_RESULT":   3,
		"GET_DEF_PHASE_RESULT":   4,
		"GET_INSTANCE_CARD":      5,
		"GET_GAMESET_RESULT":     6,
		"INSTANCE_DAMAGE":        7,
		"INSTANCE_STATUS_CHANGE": 8,
	}
)

func (x CastCmd) Enum() *CastCmd {
	p := new(CastCmd)
	*p = x
	return p
}

func (x CastCmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CastCmd) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[0].Descriptor()
}

func (CastCmd) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[0]
}

func (x CastCmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CastCmd.Descriptor instead.
func (CastCmd) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

// Sub-helper-struct
// -------------------------------------------------------------
type ECShortHand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId   int32        `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	Position EventCardPos `protobuf:"varint,2,opt,name=position,proto3,enum=ULZProto.EventCardPos" json:"position,omitempty"`
	IsInvert bool         `protobuf:"varint,3,opt,name=isInvert,proto3" json:"isInvert,omitempty"`
}

func (x *ECShortHand) Reset() {
	*x = ECShortHand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECShortHand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECShortHand) ProtoMessage() {}

func (x *ECShortHand) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECShortHand.ProtoReflect.Descriptor instead.
func (*ECShortHand) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *ECShortHand) GetCardId() int32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *ECShortHand) GetPosition() EventCardPos {
	if x != nil {
		return x.Position
	}
	return EventCardPos_BLOCK
}

func (x *ECShortHand) GetIsInvert() bool {
	if x != nil {
		return x.IsInvert
	}
	return false
}

// -------------------------------------------------------------
// Create-Game Request
type GDCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomKey      string         `protobuf:"bytes,1,opt,name=room_key,json=roomKey,proto3" json:"room_key,omitempty"`
	HostId       string         `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	DuelerId     string         `protobuf:"bytes,3,opt,name=dueler_id,json=duelerId,proto3" json:"dueler_id,omitempty"`
	Nvn          int32          `protobuf:"varint,4,opt,name=nvn,proto3" json:"nvn,omitempty"`
	HostCardDeck []*CharCardSet `protobuf:"bytes,5,rep,name=host_card_deck,json=hostCardDeck,proto3" json:"host_card_deck,omitempty"`
	DuelCardDeck []*CharCardSet `protobuf:"bytes,6,rep,name=duel_card_deck,json=duelCardDeck,proto3" json:"duel_card_deck,omitempty"`
	HostExtraEc  []*EventCard   `protobuf:"bytes,7,rep,name=host_extra_ec,json=hostExtraEc,proto3" json:"host_extra_ec,omitempty"`
	DuelExtraEc  []*EventCard   `protobuf:"bytes,8,rep,name=duel_extra_ec,json=duelExtraEc,proto3" json:"duel_extra_ec,omitempty"`
}

func (x *GDCreateReq) Reset() {
	*x = GDCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GDCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDCreateReq) ProtoMessage() {}

func (x *GDCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDCreateReq.ProtoReflect.Descriptor instead.
func (*GDCreateReq) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *GDCreateReq) GetRoomKey() string {
	if x != nil {
		return x.RoomKey
	}
	return ""
}

func (x *GDCreateReq) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *GDCreateReq) GetDuelerId() string {
	if x != nil {
		return x.DuelerId
	}
	return ""
}

func (x *GDCreateReq) GetNvn() int32 {
	if x != nil {
		return x.Nvn
	}
	return 0
}

func (x *GDCreateReq) GetHostCardDeck() []*CharCardSet {
	if x != nil {
		return x.HostCardDeck
	}
	return nil
}

func (x *GDCreateReq) GetDuelCardDeck() []*CharCardSet {
	if x != nil {
		return x.DuelCardDeck
	}
	return nil
}

func (x *GDCreateReq) GetHostExtraEc() []*EventCard {
	if x != nil {
		return x.HostExtraEc
	}
	return nil
}

func (x *GDCreateReq) GetDuelExtraEc() []*EventCard {
	if x != nil {
		return x.DuelExtraEc
	}
	return nil
}

// -------------------------------------------------------------
// Get-Game Request
//  **general-struct
type GDGetInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomKey      string         `protobuf:"bytes,1,opt,name=room_key,json=roomKey,proto3" json:"room_key,omitempty"`
	Side         PlayerSide     `protobuf:"varint,2,opt,name=side,proto3,enum=ULZProto.PlayerSide" json:"side,omitempty"`
	CurrentPhase EventHookPhase `protobuf:"varint,3,opt,name=current_phase,json=currentPhase,proto3,enum=ULZProto.EventHookPhase" json:"current_phase,omitempty"`
	IsWatcher    bool           `protobuf:"varint,4,opt,name=is_watcher,json=isWatcher,proto3" json:"is_watcher,omitempty"`
	IncomeUserId string         `protobuf:"bytes,5,opt,name=income_user_id,json=incomeUserId,proto3" json:"income_user_id,omitempty"`
}

func (x *GDGetInfoReq) Reset() {
	*x = GDGetInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GDGetInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDGetInfoReq) ProtoMessage() {}

func (x *GDGetInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDGetInfoReq.ProtoReflect.Descriptor instead.
func (*GDGetInfoReq) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *GDGetInfoReq) GetRoomKey() string {
	if x != nil {
		return x.RoomKey
	}
	return ""
}

func (x *GDGetInfoReq) GetSide() PlayerSide {
	if x != nil {
		return x.Side
	}
	return PlayerSide_HOST
}

func (x *GDGetInfoReq) GetCurrentPhase() EventHookPhase {
	if x != nil {
		return x.CurrentPhase
	}
	return EventHookPhase_gameset_start
}

func (x *GDGetInfoReq) GetIsWatcher() bool {
	if x != nil {
		return x.IsWatcher
	}
	return false
}

func (x *GDGetInfoReq) GetIncomeUserId() string {
	if x != nil {
		return x.IncomeUserId
	}
	return ""
}

// -------------------------------------------------------------
// Server-Broadcast-Response
type GDBroadcastResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomKey      string          `protobuf:"bytes,1,opt,name=room_key,json=roomKey,proto3" json:"room_key,omitempty"`
	Msg          string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Command      CastCmd         `protobuf:"varint,3,opt,name=command,proto3,enum=ULZProto.CastCmd" json:"command,omitempty"`
	CurrentPhase EventHookPhase  `protobuf:"varint,4,opt,name=current_phase,json=currentPhase,proto3,enum=ULZProto.EventHookPhase" json:"current_phase,omitempty"`
	PhaseHook    EventHookType   `protobuf:"varint,5,opt,name=phase_hook,json=phaseHook,proto3,enum=ULZProto.EventHookType" json:"phase_hook,omitempty"`
	Side         PlayerSide      `protobuf:"varint,6,opt,name=side,proto3,enum=ULZProto.PlayerSide" json:"side,omitempty"`
	InstanceSet  []*ECShortHand  `protobuf:"bytes,7,rep,name=instance_set,json=instanceSet,proto3" json:"instance_set,omitempty"`
	EffectTrig   []*EffectResult `protobuf:"bytes,8,rep,name=effect_trig,json=effectTrig,proto3" json:"effect_trig,omitempty"`
}

func (x *GDBroadcastResp) Reset() {
	*x = GDBroadcastResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GDBroadcastResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDBroadcastResp) ProtoMessage() {}

func (x *GDBroadcastResp) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDBroadcastResp.ProtoReflect.Descriptor instead.
func (*GDBroadcastResp) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

func (x *GDBroadcastResp) GetRoomKey() string {
	if x != nil {
		return x.RoomKey
	}
	return ""
}

func (x *GDBroadcastResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GDBroadcastResp) GetCommand() CastCmd {
	if x != nil {
		return x.Command
	}
	return CastCmd_GET_EFFECT_RESULT
}

func (x *GDBroadcastResp) GetCurrentPhase() EventHookPhase {
	if x != nil {
		return x.CurrentPhase
	}
	return EventHookPhase_gameset_start
}

func (x *GDBroadcastResp) GetPhaseHook() EventHookType {
	if x != nil {
		return x.PhaseHook
	}
	return EventHookType_Instant
}

func (x *GDBroadcastResp) GetSide() PlayerSide {
	if x != nil {
		return x.Side
	}
	return PlayerSide_HOST
}

func (x *GDBroadcastResp) GetInstanceSet() []*ECShortHand {
	if x != nil {
		return x.InstanceSet
	}
	return nil
}

func (x *GDBroadcastResp) GetEffectTrig() []*EffectResult {
	if x != nil {
		return x.EffectTrig
	}
	return nil
}

// -------------------------------------------------------------
// instance-set-event-card
type GDInstanceDT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomKey      string         `protobuf:"bytes,1,opt,name=room_key,json=roomKey,proto3" json:"room_key,omitempty"`
	Side         PlayerSide     `protobuf:"varint,2,opt,name=side,proto3,enum=ULZProto.PlayerSide" json:"side,omitempty"`
	CurrentPhase EventHookPhase `protobuf:"varint,3,opt,name=current_phase,json=currentPhase,proto3,enum=ULZProto.EventHookPhase" json:"current_phase,omitempty"`
	UpdateCard   []*ECShortHand `protobuf:"bytes,4,rep,name=update_card,json=updateCard,proto3" json:"update_card,omitempty"`
}

func (x *GDInstanceDT) Reset() {
	*x = GDInstanceDT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GDInstanceDT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDInstanceDT) ProtoMessage() {}

func (x *GDInstanceDT) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDInstanceDT.ProtoReflect.Descriptor instead.
func (*GDInstanceDT) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

func (x *GDInstanceDT) GetRoomKey() string {
	if x != nil {
		return x.RoomKey
	}
	return ""
}

func (x *GDInstanceDT) GetSide() PlayerSide {
	if x != nil {
		return x.Side
	}
	return PlayerSide_HOST
}

func (x *GDInstanceDT) GetCurrentPhase() EventHookPhase {
	if x != nil {
		return x.CurrentPhase
	}
	return EventHookPhase_gameset_start
}

func (x *GDInstanceDT) GetUpdateCard() []*ECShortHand {
	if x != nil {
		return x.UpdateCard
	}
	return nil
}

// -------------------------------------------------------------
// Move-Phase-Confirm Request
type GDMoveConfirmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomKey    string       `protobuf:"bytes,1,opt,name=room_key,json=roomKey,proto3" json:"room_key,omitempty"`
	Side       PlayerSide   `protobuf:"varint,2,opt,name=side,proto3,enum=ULZProto.PlayerSide" json:"side,omitempty"`
	UpdateCard []*EventCard `protobuf:"bytes,3,rep,name=update_card,json=updateCard,proto3" json:"update_card,omitempty"`
	MoveOpt    MovePhaseOpt `protobuf:"varint,4,opt,name=move_opt,json=moveOpt,proto3,enum=ULZProto.MovePhaseOpt" json:"move_opt,omitempty"`
	Point      int32        `protobuf:"varint,5,opt,name=point,proto3" json:"point,omitempty"`
	TriggerSkl []*SkillSet  `protobuf:"bytes,6,rep,name=trigger_skl,json=triggerSkl,proto3" json:"trigger_skl,omitempty"`
}

func (x *GDMoveConfirmReq) Reset() {
	*x = GDMoveConfirmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GDMoveConfirmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDMoveConfirmReq) ProtoMessage() {}

func (x *GDMoveConfirmReq) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDMoveConfirmReq.ProtoReflect.Descriptor instead.
func (*GDMoveConfirmReq) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

func (x *GDMoveConfirmReq) GetRoomKey() string {
	if x != nil {
		return x.RoomKey
	}
	return ""
}

func (x *GDMoveConfirmReq) GetSide() PlayerSide {
	if x != nil {
		return x.Side
	}
	return PlayerSide_HOST
}

func (x *GDMoveConfirmReq) GetUpdateCard() []*EventCard {
	if x != nil {
		return x.UpdateCard
	}
	return nil
}

func (x *GDMoveConfirmReq) GetMoveOpt() MovePhaseOpt {
	if x != nil {
		return x.MoveOpt
	}
	return MovePhaseOpt_NO_MOVE
}

func (x *GDMoveConfirmReq) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *GDMoveConfirmReq) GetTriggerSkl() []*SkillSet {
	if x != nil {
		return x.TriggerSkl
	}
	return nil
}

type GDMoveConfirmResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomKey      string    `protobuf:"bytes,1,opt,name=room_key,json=roomKey,proto3" json:"room_key,omitempty"`
	ResultRange  RangeType `protobuf:"varint,2,opt,name=result_range,json=resultRange,proto3,enum=ULZProto.RangeType" json:"result_range,omitempty"`
	HostHp       int32     `protobuf:"varint,3,opt,name=host_hp,json=hostHp,proto3" json:"host_hp,omitempty"`
	DuelHp       int32     `protobuf:"varint,4,opt,name=duel_hp,json=duelHp,proto3" json:"duel_hp,omitempty"`
	HostCurrCard int32     `protobuf:"varint,5,opt,name=host_curr_card,json=hostCurrCard,proto3" json:"host_curr_card,omitempty"`
	DuelCurrCard int32     `protobuf:"varint,6,opt,name=duel_curr_card,json=duelCurrCard,proto3" json:"duel_curr_card,omitempty"`
}

func (x *GDMoveConfirmResp) Reset() {
	*x = GDMoveConfirmResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GDMoveConfirmResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDMoveConfirmResp) ProtoMessage() {}

func (x *GDMoveConfirmResp) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDMoveConfirmResp.ProtoReflect.Descriptor instead.
func (*GDMoveConfirmResp) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{6}
}

func (x *GDMoveConfirmResp) GetRoomKey() string {
	if x != nil {
		return x.RoomKey
	}
	return ""
}

func (x *GDMoveConfirmResp) GetResultRange() RangeType {
	if x != nil {
		return x.ResultRange
	}
	return RangeType_SHORT
}

func (x *GDMoveConfirmResp) GetHostHp() int32 {
	if x != nil {
		return x.HostHp
	}
	return 0
}

func (x *GDMoveConfirmResp) GetDuelHp() int32 {
	if x != nil {
		return x.DuelHp
	}
	return 0
}

func (x *GDMoveConfirmResp) GetHostCurrCard() int32 {
	if x != nil {
		return x.HostCurrCard
	}
	return 0
}

func (x *GDMoveConfirmResp) GetDuelCurrCard() int32 {
	if x != nil {
		return x.DuelCurrCard
	}
	return 0
}

// -------------------------------------------------------------
// ATK/DEF-Phase-Confirm Request
//      Player send data
type GDADConfirmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomKey      string         `protobuf:"bytes,1,opt,name=room_key,json=roomKey,proto3" json:"room_key,omitempty"`
	Side         PlayerSide     `protobuf:"varint,2,opt,name=side,proto3,enum=ULZProto.PlayerSide" json:"side,omitempty"`
	CurrentPhase EventHookPhase `protobuf:"varint,3,opt,name=current_phase,json=currentPhase,proto3,enum=ULZProto.EventHookPhase" json:"current_phase,omitempty"`
	TriggerSkl   []*SkillSet    `protobuf:"bytes,4,rep,name=trigger_skl,json=triggerSkl,proto3" json:"trigger_skl,omitempty"`
	// update-card : target event-card to used
	// !NOTE: suppose the card data is stored during card-move
	UpdateCard []*EventCard `protobuf:"bytes,5,rep,name=update_card,json=updateCard,proto3" json:"update_card,omitempty"`
}

func (x *GDADConfirmReq) Reset() {
	*x = GDADConfirmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GDADConfirmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDADConfirmReq) ProtoMessage() {}

func (x *GDADConfirmReq) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDADConfirmReq.ProtoReflect.Descriptor instead.
func (*GDADConfirmReq) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{7}
}

func (x *GDADConfirmReq) GetRoomKey() string {
	if x != nil {
		return x.RoomKey
	}
	return ""
}

func (x *GDADConfirmReq) GetSide() PlayerSide {
	if x != nil {
		return x.Side
	}
	return PlayerSide_HOST
}

func (x *GDADConfirmReq) GetCurrentPhase() EventHookPhase {
	if x != nil {
		return x.CurrentPhase
	}
	return EventHookPhase_gameset_start
}

func (x *GDADConfirmReq) GetTriggerSkl() []*SkillSet {
	if x != nil {
		return x.TriggerSkl
	}
	return nil
}

func (x *GDADConfirmReq) GetUpdateCard() []*EventCard {
	if x != nil {
		return x.UpdateCard
	}
	return nil
}

// ATK/DEF-Phase-Result Response
type GDADResultResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomKey      string         `protobuf:"bytes,1,opt,name=room_key,json=roomKey,proto3" json:"room_key,omitempty"`
	Side         PlayerSide     `protobuf:"varint,2,opt,name=side,proto3,enum=ULZProto.PlayerSide" json:"side,omitempty"`
	CurrentPhase EventHookPhase `protobuf:"varint,3,opt,name=current_phase,json=currentPhase,proto3,enum=ULZProto.EventHookPhase" json:"current_phase,omitempty"`
	// total Atk / Def Point after feat-func
	Point int32 `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`
}

func (x *GDADResultResp) Reset() {
	*x = GDADResultResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GDADResultResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDADResultResp) ProtoMessage() {}

func (x *GDADResultResp) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDADResultResp.ProtoReflect.Descriptor instead.
func (*GDADResultResp) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{8}
}

func (x *GDADResultResp) GetRoomKey() string {
	if x != nil {
		return x.RoomKey
	}
	return ""
}

func (x *GDADResultResp) GetSide() PlayerSide {
	if x != nil {
		return x.Side
	}
	return PlayerSide_HOST
}

func (x *GDADResultResp) GetCurrentPhase() EventHookPhase {
	if x != nil {
		return x.CurrentPhase
	}
	return EventHookPhase_gameset_start
}

func (x *GDADResultResp) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

// ATK/DEF-Phase-DiceSet Response
type GDADDiceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomKey      string         `protobuf:"bytes,1,opt,name=room_key,json=roomKey,proto3" json:"room_key,omitempty"`
	Turns        int32          `protobuf:"varint,2,opt,name=turns,proto3" json:"turns,omitempty"`
	CurrentPhase EventHookPhase `protobuf:"varint,3,opt,name=current_phase,json=currentPhase,proto3,enum=ULZProto.EventHookPhase" json:"current_phase,omitempty"`
	PhaseAb      PlayerSide     `protobuf:"varint,4,opt,name=phase_ab,json=phaseAb,proto3,enum=ULZProto.PlayerSide" json:"phase_ab,omitempty"`
	AtkSide      PlayerSide     `protobuf:"varint,5,opt,name=atk_side,json=atkSide,proto3,enum=ULZProto.PlayerSide" json:"atk_side,omitempty"`
	AtkPoint     int32          `protobuf:"varint,6,opt,name=atk_point,json=atkPoint,proto3" json:"atk_point,omitempty"`
	AtkSkillId   []int32        `protobuf:"varint,7,rep,packed,name=atk_skill_id,json=atkSkillId,proto3" json:"atk_skill_id,omitempty"`
	DefSide      PlayerSide     `protobuf:"varint,8,opt,name=def_side,json=defSide,proto3,enum=ULZProto.PlayerSide" json:"def_side,omitempty"`
	DefPoint     int32          `protobuf:"varint,9,opt,name=def_point,json=defPoint,proto3" json:"def_point,omitempty"`
	DefSkillId   []int32        `protobuf:"varint,10,rep,packed,name=def_skill_id,json=defSkillId,proto3" json:"def_skill_id,omitempty"`
}

func (x *GDADDiceResult) Reset() {
	*x = GDADDiceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GDADDiceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDADDiceResult) ProtoMessage() {}

func (x *GDADDiceResult) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDADDiceResult.ProtoReflect.Descriptor instead.
func (*GDADDiceResult) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{9}
}

func (x *GDADDiceResult) GetRoomKey() string {
	if x != nil {
		return x.RoomKey
	}
	return ""
}

func (x *GDADDiceResult) GetTurns() int32 {
	if x != nil {
		return x.Turns
	}
	return 0
}

func (x *GDADDiceResult) GetCurrentPhase() EventHookPhase {
	if x != nil {
		return x.CurrentPhase
	}
	return EventHookPhase_gameset_start
}

func (x *GDADDiceResult) GetPhaseAb() PlayerSide {
	if x != nil {
		return x.PhaseAb
	}
	return PlayerSide_HOST
}

func (x *GDADDiceResult) GetAtkSide() PlayerSide {
	if x != nil {
		return x.AtkSide
	}
	return PlayerSide_HOST
}

func (x *GDADDiceResult) GetAtkPoint() int32 {
	if x != nil {
		return x.AtkPoint
	}
	return 0
}

func (x *GDADDiceResult) GetAtkSkillId() []int32 {
	if x != nil {
		return x.AtkSkillId
	}
	return nil
}

func (x *GDADDiceResult) GetDefSide() PlayerSide {
	if x != nil {
		return x.DefSide
	}
	return PlayerSide_HOST
}

func (x *GDADDiceResult) GetDefPoint() int32 {
	if x != nil {
		return x.DefPoint
	}
	return 0
}

func (x *GDADDiceResult) GetDefSkillId() []int32 {
	if x != nil {
		return x.DefSkillId
	}
	return nil
}

// -------------------------------------------------------------
//
type GDPhaseConfirmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomKey      string         `protobuf:"bytes,1,opt,name=room_key,json=roomKey,proto3" json:"room_key,omitempty"`
	Side         PlayerSide     `protobuf:"varint,2,opt,name=side,proto3,enum=ULZProto.PlayerSide" json:"side,omitempty"`
	CurrentPhase EventHookPhase `protobuf:"varint,3,opt,name=current_phase,json=currentPhase,proto3,enum=ULZProto.EventHookPhase" json:"current_phase,omitempty"`
	PhaseHook    EventHookType  `protobuf:"varint,4,opt,name=phase_hook,json=phaseHook,proto3,enum=ULZProto.EventHookType" json:"phase_hook,omitempty"`
}

func (x *GDPhaseConfirmReq) Reset() {
	*x = GDPhaseConfirmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GDPhaseConfirmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDPhaseConfirmReq) ProtoMessage() {}

func (x *GDPhaseConfirmReq) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDPhaseConfirmReq.ProtoReflect.Descriptor instead.
func (*GDPhaseConfirmReq) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{10}
}

func (x *GDPhaseConfirmReq) GetRoomKey() string {
	if x != nil {
		return x.RoomKey
	}
	return ""
}

func (x *GDPhaseConfirmReq) GetSide() PlayerSide {
	if x != nil {
		return x.Side
	}
	return PlayerSide_HOST
}

func (x *GDPhaseConfirmReq) GetCurrentPhase() EventHookPhase {
	if x != nil {
		return x.CurrentPhase
	}
	return EventHookPhase_gameset_start
}

func (x *GDPhaseConfirmReq) GetPhaseHook() EventHookType {
	if x != nil {
		return x.PhaseHook
	}
	return EventHookType_Instant
}

type GDPhaseConfirmResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomKey string `protobuf:"bytes,1,opt,name=room_key,json=roomKey,proto3" json:"room_key,omitempty"` // repeated PhaseEffect
}

func (x *GDPhaseConfirmResp) Reset() {
	*x = GDPhaseConfirmResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GDPhaseConfirmResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDPhaseConfirmResp) ProtoMessage() {}

func (x *GDPhaseConfirmResp) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDPhaseConfirmResp.ProtoReflect.Descriptor instead.
func (*GDPhaseConfirmResp) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{11}
}

func (x *GDPhaseConfirmResp) GetRoomKey() string {
	if x != nil {
		return x.RoomKey
	}
	return ""
}

// -------------------------------------------------------------
//
type GDChangeConfirmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomKey string     `protobuf:"bytes,1,opt,name=room_key,json=roomKey,proto3" json:"room_key,omitempty"`
	Side    PlayerSide `protobuf:"varint,2,opt,name=side,proto3,enum=ULZProto.PlayerSide" json:"side,omitempty"`
	CardNum int32      `protobuf:"varint,3,opt,name=card_num,json=cardNum,proto3" json:"card_num,omitempty"`
}

func (x *GDChangeConfirmReq) Reset() {
	*x = GDChangeConfirmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GDChangeConfirmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDChangeConfirmReq) ProtoMessage() {}

func (x *GDChangeConfirmReq) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDChangeConfirmReq.ProtoReflect.Descriptor instead.
func (*GDChangeConfirmReq) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{12}
}

func (x *GDChangeConfirmReq) GetRoomKey() string {
	if x != nil {
		return x.RoomKey
	}
	return ""
}

func (x *GDChangeConfirmReq) GetSide() PlayerSide {
	if x != nil {
		return x.Side
	}
	return PlayerSide_HOST
}

func (x *GDChangeConfirmReq) GetCardNum() int32 {
	if x != nil {
		return x.CardNum
	}
	return 0
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0a, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a, 0x0b, 0x45,
	0x43, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x22, 0xdc, 0x02, 0x0a, 0x0b, 0x47, 0x44, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x75, 0x65, 0x6c, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x65, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x76, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6e, 0x76, 0x6e, 0x12, 0x3b, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x44,
	0x65, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x0e, 0x64, 0x75, 0x65, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x55, 0x4c,
	0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x43, 0x61, 0x72, 0x64, 0x53,
	0x65, 0x74, 0x52, 0x0c, 0x64, 0x75, 0x65, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b,
	0x12, 0x37, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x65,
	0x63, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x68, 0x6f,
	0x73, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x63, 0x12, 0x37, 0x0a, 0x0d, 0x64, 0x75, 0x65,
	0x6c, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x65, 0x63, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x64, 0x75, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x63, 0x22, 0xd7, 0x01, 0x0a, 0x0c, 0x47, 0x44, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x28,
	0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x55,
	0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69,
	0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xff, 0x02, 0x0a,
	0x0f, 0x47, 0x44, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2b, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x43, 0x6d,
	0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x6f,
	0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x48, 0x6f, 0x6f,
	0x6b, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x43, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x72, 0x69, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x55, 0x4c, 0x5a,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x72, 0x69, 0x67, 0x22, 0xca,
	0x01, 0x0a, 0x0c, 0x47, 0x44, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x54, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x69,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x55, 0x4c,
	0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x43, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x10,
	0x47, 0x44, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x55, 0x4c, 0x5a, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x52,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x55, 0x4c, 0x5a,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x70, 0x74, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x70, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f,
	0x73, 0x6b, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x55, 0x4c, 0x5a, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x6b, 0x6c, 0x22, 0xe4, 0x01, 0x0a, 0x11, 0x47, 0x44,
	0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x68, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x48, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x75, 0x65, 0x6c, 0x5f, 0x68, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x75,
	0x65, 0x6c, 0x48, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x6f,
	0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x75,
	0x65, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x64, 0x75, 0x65, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x22, 0xff, 0x01, 0x0a, 0x0e, 0x47, 0x44, 0x41, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x28,
	0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x55,
	0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69,
	0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x73, 0x6b, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x55,
	0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x74,
	0x52, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x6b, 0x6c, 0x12, 0x34, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x0e, 0x47, 0x44, 0x41, 0x44, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x79,
	0x12, 0x28, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22,
	0x91, 0x03, 0x0a, 0x0e, 0x47, 0x44, 0x41, 0x44, 0x44, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x75,
	0x72, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x55, 0x4c, 0x5a,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x62, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x41, 0x62, 0x12, 0x2f, 0x0a, 0x08, 0x61, 0x74, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x52, 0x07, 0x61, 0x74, 0x6b,
	0x53, 0x69, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x74, 0x6b, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x6b, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x74, 0x6b, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x74, 0x6b, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x65, 0x66, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x52, 0x07, 0x64, 0x65, 0x66,
	0x53, 0x69, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x66, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x47, 0x44, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x3d,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x22, 0x2f, 0x0a, 0x12, 0x47, 0x44, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x22, 0x74, 0x0a, 0x12, 0x47, 0x44, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x2a, 0xea, 0x01, 0x0a,
	0x07, 0x43, 0x61, 0x73, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x54, 0x5f,
	0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x50, 0x48, 0x41, 0x53,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x45,
	0x54, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x54, 0x4b,
	0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x12,
	0x18, 0x0a, 0x14, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x54,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x05,
	0x12, 0x16, 0x0a, 0x12, 0x47, 0x45, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x45, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x07, 0x12, 0x1a, 0x0a,
	0x16, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x08, 0x42, 0x1d, 0x5a, 0x07, 0x2e, 0x3b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0xaa, 0x02, 0x11, 0x55, 0x4c, 0x5a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_message_proto_goTypes = []interface{}{
	(CastCmd)(0),               // 0: ULZProto.CastCmd
	(*ECShortHand)(nil),        // 1: ULZProto.ECShortHand
	(*GDCreateReq)(nil),        // 2: ULZProto.GDCreateReq
	(*GDGetInfoReq)(nil),       // 3: ULZProto.GDGetInfoReq
	(*GDBroadcastResp)(nil),    // 4: ULZProto.GDBroadcastResp
	(*GDInstanceDT)(nil),       // 5: ULZProto.GDInstanceDT
	(*GDMoveConfirmReq)(nil),   // 6: ULZProto.GDMoveConfirmReq
	(*GDMoveConfirmResp)(nil),  // 7: ULZProto.GDMoveConfirmResp
	(*GDADConfirmReq)(nil),     // 8: ULZProto.GDADConfirmReq
	(*GDADResultResp)(nil),     // 9: ULZProto.GDADResultResp
	(*GDADDiceResult)(nil),     // 10: ULZProto.GDADDiceResult
	(*GDPhaseConfirmReq)(nil),  // 11: ULZProto.GDPhaseConfirmReq
	(*GDPhaseConfirmResp)(nil), // 12: ULZProto.GDPhaseConfirmResp
	(*GDChangeConfirmReq)(nil), // 13: ULZProto.GDChangeConfirmReq
	(EventCardPos)(0),          // 14: ULZProto.EventCardPos
	(*CharCardSet)(nil),        // 15: ULZProto.CharCardSet
	(*EventCard)(nil),          // 16: ULZProto.EventCard
	(PlayerSide)(0),            // 17: ULZProto.PlayerSide
	(EventHookPhase)(0),        // 18: ULZProto.EventHookPhase
	(EventHookType)(0),         // 19: ULZProto.EventHookType
	(*EffectResult)(nil),       // 20: ULZProto.EffectResult
	(MovePhaseOpt)(0),          // 21: ULZProto.MovePhaseOpt
	(*SkillSet)(nil),           // 22: ULZProto.SkillSet
	(RangeType)(0),             // 23: ULZProto.RangeType
}
var file_message_proto_depIdxs = []int32{
	14, // 0: ULZProto.ECShortHand.position:type_name -> ULZProto.EventCardPos
	15, // 1: ULZProto.GDCreateReq.host_card_deck:type_name -> ULZProto.CharCardSet
	15, // 2: ULZProto.GDCreateReq.duel_card_deck:type_name -> ULZProto.CharCardSet
	16, // 3: ULZProto.GDCreateReq.host_extra_ec:type_name -> ULZProto.EventCard
	16, // 4: ULZProto.GDCreateReq.duel_extra_ec:type_name -> ULZProto.EventCard
	17, // 5: ULZProto.GDGetInfoReq.side:type_name -> ULZProto.PlayerSide
	18, // 6: ULZProto.GDGetInfoReq.current_phase:type_name -> ULZProto.EventHookPhase
	0,  // 7: ULZProto.GDBroadcastResp.command:type_name -> ULZProto.CastCmd
	18, // 8: ULZProto.GDBroadcastResp.current_phase:type_name -> ULZProto.EventHookPhase
	19, // 9: ULZProto.GDBroadcastResp.phase_hook:type_name -> ULZProto.EventHookType
	17, // 10: ULZProto.GDBroadcastResp.side:type_name -> ULZProto.PlayerSide
	1,  // 11: ULZProto.GDBroadcastResp.instance_set:type_name -> ULZProto.ECShortHand
	20, // 12: ULZProto.GDBroadcastResp.effect_trig:type_name -> ULZProto.EffectResult
	17, // 13: ULZProto.GDInstanceDT.side:type_name -> ULZProto.PlayerSide
	18, // 14: ULZProto.GDInstanceDT.current_phase:type_name -> ULZProto.EventHookPhase
	1,  // 15: ULZProto.GDInstanceDT.update_card:type_name -> ULZProto.ECShortHand
	17, // 16: ULZProto.GDMoveConfirmReq.side:type_name -> ULZProto.PlayerSide
	16, // 17: ULZProto.GDMoveConfirmReq.update_card:type_name -> ULZProto.EventCard
	21, // 18: ULZProto.GDMoveConfirmReq.move_opt:type_name -> ULZProto.MovePhaseOpt
	22, // 19: ULZProto.GDMoveConfirmReq.trigger_skl:type_name -> ULZProto.SkillSet
	23, // 20: ULZProto.GDMoveConfirmResp.result_range:type_name -> ULZProto.RangeType
	17, // 21: ULZProto.GDADConfirmReq.side:type_name -> ULZProto.PlayerSide
	18, // 22: ULZProto.GDADConfirmReq.current_phase:type_name -> ULZProto.EventHookPhase
	22, // 23: ULZProto.GDADConfirmReq.trigger_skl:type_name -> ULZProto.SkillSet
	16, // 24: ULZProto.GDADConfirmReq.update_card:type_name -> ULZProto.EventCard
	17, // 25: ULZProto.GDADResultResp.side:type_name -> ULZProto.PlayerSide
	18, // 26: ULZProto.GDADResultResp.current_phase:type_name -> ULZProto.EventHookPhase
	18, // 27: ULZProto.GDADDiceResult.current_phase:type_name -> ULZProto.EventHookPhase
	17, // 28: ULZProto.GDADDiceResult.phase_ab:type_name -> ULZProto.PlayerSide
	17, // 29: ULZProto.GDADDiceResult.atk_side:type_name -> ULZProto.PlayerSide
	17, // 30: ULZProto.GDADDiceResult.def_side:type_name -> ULZProto.PlayerSide
	17, // 31: ULZProto.GDPhaseConfirmReq.side:type_name -> ULZProto.PlayerSide
	18, // 32: ULZProto.GDPhaseConfirmReq.current_phase:type_name -> ULZProto.EventHookPhase
	19, // 33: ULZProto.GDPhaseConfirmReq.phase_hook:type_name -> ULZProto.EventHookType
	17, // 34: ULZProto.GDChangeConfirmReq.side:type_name -> ULZProto.PlayerSide
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	file_EventHookPhase_proto_init()
	file_Data_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECShortHand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GDCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GDGetInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GDBroadcastResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GDInstanceDT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GDMoveConfirmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GDMoveConfirmResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GDADConfirmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GDADResultResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GDADDiceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GDPhaseConfirmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GDPhaseConfirmResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GDChangeConfirmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		EnumInfos:         file_message_proto_enumTypes,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
