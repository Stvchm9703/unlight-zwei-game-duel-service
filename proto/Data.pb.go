// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.10.0
// source: Data.proto

package proto

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// -------------------------------------------------------------
// ANCHOR: data-struct for all game struct
// SECTION: Data.proto
type PlayerSide int32

const (
	PlayerSide_HOST   PlayerSide = 0
	PlayerSide_DUELER PlayerSide = 1
)

// Enum value maps for PlayerSide.
var (
	PlayerSide_name = map[int32]string{
		0: "HOST",
		1: "DUELER",
	}
	PlayerSide_value = map[string]int32{
		"HOST":   0,
		"DUELER": 1,
	}
)

func (x PlayerSide) Enum() *PlayerSide {
	p := new(PlayerSide)
	*p = x
	return p
}

func (x PlayerSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerSide) Descriptor() protoreflect.EnumDescriptor {
	return file_Data_proto_enumTypes[0].Descriptor()
}

func (PlayerSide) Type() protoreflect.EnumType {
	return &file_Data_proto_enumTypes[0]
}

func (x PlayerSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerSide.Descriptor instead.
func (PlayerSide) EnumDescriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{0}
}

type EventCardType int32

const (
	EventCardType_NULL    EventCardType = 0
	EventCardType_ATTACK  EventCardType = 1
	EventCardType_DEFENCE EventCardType = 2
	EventCardType_GUN     EventCardType = 3
	EventCardType_MOVE    EventCardType = 4
	EventCardType_STAR    EventCardType = 5
)

// Enum value maps for EventCardType.
var (
	EventCardType_name = map[int32]string{
		0: "NULL",
		1: "ATTACK",
		2: "DEFENCE",
		3: "GUN",
		4: "MOVE",
		5: "STAR",
	}
	EventCardType_value = map[string]int32{
		"NULL":    0,
		"ATTACK":  1,
		"DEFENCE": 2,
		"GUN":     3,
		"MOVE":    4,
		"STAR":    5,
	}
)

func (x EventCardType) Enum() *EventCardType {
	p := new(EventCardType)
	*p = x
	return p
}

func (x EventCardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventCardType) Descriptor() protoreflect.EnumDescriptor {
	return file_Data_proto_enumTypes[1].Descriptor()
}

func (EventCardType) Type() protoreflect.EnumType {
	return &file_Data_proto_enumTypes[1]
}

func (x EventCardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventCardType.Descriptor instead.
func (EventCardType) EnumDescriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{1}
}

type EventCardPos int32

const (
	EventCardPos_BLOCK   EventCardPos = 0
	EventCardPos_INSIDE  EventCardPos = 1
	EventCardPos_OUTSIDE EventCardPos = 2
	EventCardPos_DESTROY EventCardPos = 3
)

// Enum value maps for EventCardPos.
var (
	EventCardPos_name = map[int32]string{
		0: "BLOCK",
		1: "INSIDE",
		2: "OUTSIDE",
		3: "DESTROY",
	}
	EventCardPos_value = map[string]int32{
		"BLOCK":   0,
		"INSIDE":  1,
		"OUTSIDE": 2,
		"DESTROY": 3,
	}
)

func (x EventCardPos) Enum() *EventCardPos {
	p := new(EventCardPos)
	*p = x
	return p
}

func (x EventCardPos) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventCardPos) Descriptor() protoreflect.EnumDescriptor {
	return file_Data_proto_enumTypes[2].Descriptor()
}

func (EventCardPos) Type() protoreflect.EnumType {
	return &file_Data_proto_enumTypes[2]
}

func (x EventCardPos) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventCardPos.Descriptor instead.
func (EventCardPos) EnumDescriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{2}
}

type RangeType int32

const (
	RangeType_SHORT  RangeType = 0
	RangeType_MIDDLE RangeType = 1
	RangeType_LONG   RangeType = 2
)

// Enum value maps for RangeType.
var (
	RangeType_name = map[int32]string{
		0: "SHORT",
		1: "MIDDLE",
		2: "LONG",
	}
	RangeType_value = map[string]int32{
		"SHORT":  0,
		"MIDDLE": 1,
		"LONG":   2,
	}
)

func (x RangeType) Enum() *RangeType {
	p := new(RangeType)
	*p = x
	return p
}

func (x RangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_Data_proto_enumTypes[3].Descriptor()
}

func (RangeType) Type() protoreflect.EnumType {
	return &file_Data_proto_enumTypes[3]
}

func (x RangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RangeType.Descriptor instead.
func (RangeType) EnumDescriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{3}
}

type MovePhaseOpt int32

const (
	MovePhaseOpt_NO_MOVE  MovePhaseOpt = 0
	MovePhaseOpt_FORWARD  MovePhaseOpt = 1
	MovePhaseOpt_BACKWARD MovePhaseOpt = 2
	MovePhaseOpt_STAY     MovePhaseOpt = 3
	MovePhaseOpt_CHANGE   MovePhaseOpt = 4
)

// Enum value maps for MovePhaseOpt.
var (
	MovePhaseOpt_name = map[int32]string{
		0: "NO_MOVE",
		1: "FORWARD",
		2: "BACKWARD",
		3: "STAY",
		4: "CHANGE",
	}
	MovePhaseOpt_value = map[string]int32{
		"NO_MOVE":  0,
		"FORWARD":  1,
		"BACKWARD": 2,
		"STAY":     3,
		"CHANGE":   4,
	}
)

func (x MovePhaseOpt) Enum() *MovePhaseOpt {
	p := new(MovePhaseOpt)
	*p = x
	return p
}

func (x MovePhaseOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MovePhaseOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_Data_proto_enumTypes[4].Descriptor()
}

func (MovePhaseOpt) Type() protoreflect.EnumType {
	return &file_Data_proto_enumTypes[4]
}

func (x MovePhaseOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MovePhaseOpt.Descriptor instead.
func (MovePhaseOpt) EnumDescriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{4}
}

type EventCardFunc int32

const (
	EventCardFunc_null                EventCardFunc = 0
	EventCardFunc_occur_chance_event  EventCardFunc = 1
	EventCardFunc_occur_heal_event    EventCardFunc = 2
	EventCardFunc_occur_cure_event    EventCardFunc = 3
	EventCardFunc_occur_quick_event   EventCardFunc = 4
	EventCardFunc_occur_curse_event   EventCardFunc = 5
	EventCardFunc_occur_chalice_event EventCardFunc = 6
	EventCardFunc_occur_poison_event  EventCardFunc = 7
	EventCardFunc_occur_damage_event  EventCardFunc = 8
)

// Enum value maps for EventCardFunc.
var (
	EventCardFunc_name = map[int32]string{
		0: "null",
		1: "occur_chance_event",
		2: "occur_heal_event",
		3: "occur_cure_event",
		4: "occur_quick_event",
		5: "occur_curse_event",
		6: "occur_chalice_event",
		7: "occur_poison_event",
		8: "occur_damage_event",
	}
	EventCardFunc_value = map[string]int32{
		"null":                0,
		"occur_chance_event":  1,
		"occur_heal_event":    2,
		"occur_cure_event":    3,
		"occur_quick_event":   4,
		"occur_curse_event":   5,
		"occur_chalice_event": 6,
		"occur_poison_event":  7,
		"occur_damage_event":  8,
	}
)

func (x EventCardFunc) Enum() *EventCardFunc {
	p := new(EventCardFunc)
	*p = x
	return p
}

func (x EventCardFunc) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventCardFunc) Descriptor() protoreflect.EnumDescriptor {
	return file_Data_proto_enumTypes[5].Descriptor()
}

func (EventCardFunc) Type() protoreflect.EnumType {
	return &file_Data_proto_enumTypes[5]
}

func (x EventCardFunc) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventCardFunc.Descriptor instead.
func (EventCardFunc) EnumDescriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{5}
}

type SignEq int32

const (
	SignEq_EQUAL   SignEq = 0
	SignEq_GREATER SignEq = 1
	SignEq_LESSER  SignEq = 2
	SignEq_ANY     SignEq = 3
)

// Enum value maps for SignEq.
var (
	SignEq_name = map[int32]string{
		0: "EQUAL",
		1: "GREATER",
		2: "LESSER",
		3: "ANY",
	}
	SignEq_value = map[string]int32{
		"EQUAL":   0,
		"GREATER": 1,
		"LESSER":  2,
		"ANY":     3,
	}
)

func (x SignEq) Enum() *SignEq {
	p := new(SignEq)
	*p = x
	return p
}

func (x SignEq) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignEq) Descriptor() protoreflect.EnumDescriptor {
	return file_Data_proto_enumTypes[6].Descriptor()
}

func (SignEq) Type() protoreflect.EnumType {
	return &file_Data_proto_enumTypes[6]
}

func (x SignEq) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignEq.Descriptor instead.
func (SignEq) EnumDescriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{6}
}

type EffectOption int32

const (
	// Status_Addition :
	//    like +3-Move, by cd to change the +/- value
	EffectOption_Status_Addition EffectOption = 0
	//  Instance_Change :
	//    like posion, it will -1 to inst_value in CC
	EffectOption_Instance_Change EffectOption = 1
	// Status_FixVal :
	//    like Ex Indomitable Spirit , it will last one blood
	EffectOption_Status_FixValue EffectOption = 2
	// Hard_Status_FicValue,
	// Somehow, Some Damage is
	// "whatever card is not current use, but still give the damn damage"
	EffectOption_Hard_Instance_Change EffectOption = 3
)

// Enum value maps for EffectOption.
var (
	EffectOption_name = map[int32]string{
		0: "Status_Addition",
		1: "Instance_Change",
		2: "Status_FixValue",
		3: "Hard_Instance_Change",
	}
	EffectOption_value = map[string]int32{
		"Status_Addition":      0,
		"Instance_Change":      1,
		"Status_FixValue":      2,
		"Hard_Instance_Change": 3,
	}
)

func (x EffectOption) Enum() *EffectOption {
	p := new(EffectOption)
	*p = x
	return p
}

func (x EffectOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EffectOption) Descriptor() protoreflect.EnumDescriptor {
	return file_Data_proto_enumTypes[7].Descriptor()
}

func (EffectOption) Type() protoreflect.EnumType {
	return &file_Data_proto_enumTypes[7]
}

func (x EffectOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EffectOption.Descriptor instead.
func (EffectOption) EnumDescriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{7}
}

// GameDataSet
//      the whole instance game-duel set
type GameDataSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  room_key, see also RoomService/message.proto : Room
	RoomKey string `protobuf:"bytes,1,opt,name=room_key,json=roomKey,proto3" json:"room_key,omitempty"`
	//  host_id, the user-id of host player
	HostId string `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	//  dueler_id, the user-id of dueler player
	DuelId string `protobuf:"bytes,3,opt,name=duel_id,json=duelId,proto3" json:"duel_id,omitempty"`
	//  game_turn, the number of turns in game
	GameTurn int32 `protobuf:"varint,4,opt,name=game_turn,json=gameTurn,proto3" json:"game_turn,omitempty"`
	//  host_card_deck, the character card
	HostCardDeck []*CharCardSet `protobuf:"bytes,5,rep,name=host_card_deck,json=hostCardDeck,proto3" json:"host_card_deck,omitempty"`
	//  duel_card_deck, the character card
	DuelCardDeck []*CharCardSet `protobuf:"bytes,6,rep,name=duel_card_deck,json=duelCardDeck,proto3" json:"duel_card_deck,omitempty"`
	//  host_curr_card, current on-used char-card
	HostCurrCardKey int32 `protobuf:"varint,7,opt,name=host_curr_card_key,json=hostCurrCardKey,proto3" json:"host_curr_card_key,omitempty"`
	//  dueler_curr_card, current on-used char-card
	DuelCurrCardKey int32 `protobuf:"varint,8,opt,name=duel_curr_card_key,json=duelCurrCardKey,proto3" json:"duel_curr_card_key,omitempty"`
	//  host_event_card_deck
	HostEventCardDeck []*EventCard `protobuf:"bytes,9,rep,name=host_event_card_deck,json=hostEventCardDeck,proto3" json:"host_event_card_deck,omitempty"`
	//  duel_event_card_deck
	DuelEventCardDeck []*EventCard `protobuf:"bytes,10,rep,name=duel_event_card_deck,json=duelEventCardDeck,proto3" json:"duel_event_card_deck,omitempty"`
	//  curr_range
	Range RangeType `protobuf:"varint,11,opt,name=range,proto3,enum=ULZProto.RangeType" json:"range,omitempty"`
	// nvn
	Nvn         int32      `protobuf:"varint,12,opt,name=nvn,proto3" json:"nvn,omitempty"`
	FirstAttack PlayerSide `protobuf:"varint,13,opt,name=first_attack,json=firstAttack,proto3,enum=ULZProto.PlayerSide" json:"first_attack,omitempty"`
	CurrPhase   PlayerSide `protobuf:"varint,14,opt,name=curr_phase,json=currPhase,proto3,enum=ULZProto.PlayerSide" json:"curr_phase,omitempty"`
	//  event_phase, the event hook phase
	EventPhase EventHookPhase `protobuf:"varint,15,opt,name=event_phase,json=eventPhase,proto3,enum=ULZProto.EventHookPhase" json:"event_phase,omitempty"`
	//  hook_type, the event hook type
	HookType EventHookType `protobuf:"varint,16,opt,name=hook_type,json=hookType,proto3,enum=ULZProto.EventHookType" json:"hook_type,omitempty"`
	//  Effect-result
	EffectCounter []*EffectResult `protobuf:"bytes,17,rep,name=effect_counter,json=effectCounter,proto3" json:"effect_counter,omitempty"`
}

func (x *GameDataSet) Reset() {
	*x = GameDataSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameDataSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameDataSet) ProtoMessage() {}

func (x *GameDataSet) ProtoReflect() protoreflect.Message {
	mi := &file_Data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameDataSet.ProtoReflect.Descriptor instead.
func (*GameDataSet) Descriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{0}
}

func (x *GameDataSet) GetRoomKey() string {
	if x != nil {
		return x.RoomKey
	}
	return ""
}

func (x *GameDataSet) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *GameDataSet) GetDuelId() string {
	if x != nil {
		return x.DuelId
	}
	return ""
}

func (x *GameDataSet) GetGameTurn() int32 {
	if x != nil {
		return x.GameTurn
	}
	return 0
}

func (x *GameDataSet) GetHostCardDeck() []*CharCardSet {
	if x != nil {
		return x.HostCardDeck
	}
	return nil
}

func (x *GameDataSet) GetDuelCardDeck() []*CharCardSet {
	if x != nil {
		return x.DuelCardDeck
	}
	return nil
}

func (x *GameDataSet) GetHostCurrCardKey() int32 {
	if x != nil {
		return x.HostCurrCardKey
	}
	return 0
}

func (x *GameDataSet) GetDuelCurrCardKey() int32 {
	if x != nil {
		return x.DuelCurrCardKey
	}
	return 0
}

func (x *GameDataSet) GetHostEventCardDeck() []*EventCard {
	if x != nil {
		return x.HostEventCardDeck
	}
	return nil
}

func (x *GameDataSet) GetDuelEventCardDeck() []*EventCard {
	if x != nil {
		return x.DuelEventCardDeck
	}
	return nil
}

func (x *GameDataSet) GetRange() RangeType {
	if x != nil {
		return x.Range
	}
	return RangeType_SHORT
}

func (x *GameDataSet) GetNvn() int32 {
	if x != nil {
		return x.Nvn
	}
	return 0
}

func (x *GameDataSet) GetFirstAttack() PlayerSide {
	if x != nil {
		return x.FirstAttack
	}
	return PlayerSide_HOST
}

func (x *GameDataSet) GetCurrPhase() PlayerSide {
	if x != nil {
		return x.CurrPhase
	}
	return PlayerSide_HOST
}

func (x *GameDataSet) GetEventPhase() EventHookPhase {
	if x != nil {
		return x.EventPhase
	}
	return EventHookPhase_gameset_start
}

func (x *GameDataSet) GetHookType() EventHookType {
	if x != nil {
		return x.HookType
	}
	return EventHookType_Instant
}

func (x *GameDataSet) GetEffectCounter() []*EffectResult {
	if x != nil {
		return x.EffectCounter
	}
	return nil
}

// CharCardSet
//
type CharCardSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharId     int32           `protobuf:"varint,1,opt,name=char_id,json=charId,proto3" json:"char_id,omitempty"`
	CardId     int32           `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	HpInst     int32           `protobuf:"varint,3,opt,name=hp_inst,json=hpInst,proto3" json:"hp_inst,omitempty"`
	ApInst     int32           `protobuf:"varint,4,opt,name=ap_inst,json=apInst,proto3" json:"ap_inst,omitempty"`
	DpInst     int32           `protobuf:"varint,5,opt,name=dp_inst,json=dpInst,proto3" json:"dp_inst,omitempty"`
	HpOrig     int32           `protobuf:"varint,6,opt,name=hp_orig,json=hpOrig,proto3" json:"hp_orig,omitempty"`
	ApOrig     int32           `protobuf:"varint,7,opt,name=ap_orig,json=apOrig,proto3" json:"ap_orig,omitempty"`
	DpOrig     int32           `protobuf:"varint,8,opt,name=dp_orig,json=dpOrig,proto3" json:"dp_orig,omitempty"`
	Level      int32           `protobuf:"varint,9,opt,name=level,proto3" json:"level,omitempty"`
	StatusInst []*StatusSet    `protobuf:"bytes,10,rep,name=status_inst,json=statusInst,proto3" json:"status_inst,omitempty"`
	EquSet     *CharCardEquSet `protobuf:"bytes,11,opt,name=equ_set,json=equSet,proto3" json:"equ_set,omitempty"`
}

func (x *CharCardSet) Reset() {
	*x = CharCardSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharCardSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharCardSet) ProtoMessage() {}

func (x *CharCardSet) ProtoReflect() protoreflect.Message {
	mi := &file_Data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharCardSet.ProtoReflect.Descriptor instead.
func (*CharCardSet) Descriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{1}
}

func (x *CharCardSet) GetCharId() int32 {
	if x != nil {
		return x.CharId
	}
	return 0
}

func (x *CharCardSet) GetCardId() int32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *CharCardSet) GetHpInst() int32 {
	if x != nil {
		return x.HpInst
	}
	return 0
}

func (x *CharCardSet) GetApInst() int32 {
	if x != nil {
		return x.ApInst
	}
	return 0
}

func (x *CharCardSet) GetDpInst() int32 {
	if x != nil {
		return x.DpInst
	}
	return 0
}

func (x *CharCardSet) GetHpOrig() int32 {
	if x != nil {
		return x.HpOrig
	}
	return 0
}

func (x *CharCardSet) GetApOrig() int32 {
	if x != nil {
		return x.ApOrig
	}
	return 0
}

func (x *CharCardSet) GetDpOrig() int32 {
	if x != nil {
		return x.DpOrig
	}
	return 0
}

func (x *CharCardSet) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CharCardSet) GetStatusInst() []*StatusSet {
	if x != nil {
		return x.StatusInst
	}
	return nil
}

func (x *CharCardSet) GetEquSet() *CharCardEquSet {
	if x != nil {
		return x.EquSet
	}
	return nil
}

type CharCardEquSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquId int32 `protobuf:"varint,1,opt,name=equ_id,json=equId,proto3" json:"equ_id,omitempty"`
	Hp    int32 `protobuf:"varint,2,opt,name=hp,proto3" json:"hp,omitempty"`
	Ap    int32 `protobuf:"varint,3,opt,name=ap,proto3" json:"ap,omitempty"`
	Dp    int32 `protobuf:"varint,4,opt,name=dp,proto3" json:"dp,omitempty"`
}

func (x *CharCardEquSet) Reset() {
	*x = CharCardEquSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharCardEquSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharCardEquSet) ProtoMessage() {}

func (x *CharCardEquSet) ProtoReflect() protoreflect.Message {
	mi := &file_Data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharCardEquSet.ProtoReflect.Descriptor instead.
func (*CharCardEquSet) Descriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{2}
}

func (x *CharCardEquSet) GetEquId() int32 {
	if x != nil {
		return x.EquId
	}
	return 0
}

func (x *CharCardEquSet) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *CharCardEquSet) GetAp() int32 {
	if x != nil {
		return x.Ap
	}
	return 0
}

func (x *CharCardEquSet) GetDp() int32 {
	if x != nil {
		return x.Dp
	}
	return 0
}

type EventCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UpOption   EventCardType `protobuf:"varint,2,opt,name=up_option,json=upOption,proto3,enum=ULZProto.EventCardType" json:"up_option,omitempty"`
	UpVal      int32         `protobuf:"varint,3,opt,name=up_val,json=upVal,proto3" json:"up_val,omitempty"`
	DownOption EventCardType `protobuf:"varint,4,opt,name=down_option,json=downOption,proto3,enum=ULZProto.EventCardType" json:"down_option,omitempty"`
	DownVal    int32         `protobuf:"varint,5,opt,name=down_val,json=downVal,proto3" json:"down_val,omitempty"`
	Position   EventCardPos  `protobuf:"varint,6,opt,name=position,proto3,enum=ULZProto.EventCardPos" json:"position,omitempty"`
	IsInvert   bool          `protobuf:"varint,7,opt,name=is_invert,json=isInvert,proto3" json:"is_invert,omitempty"`
	FuncMount  EventCardFunc `protobuf:"varint,8,opt,name=func_mount,json=funcMount,proto3,enum=ULZProto.EventCardFunc" json:"func_mount,omitempty"`
	MountVal   int32         `protobuf:"varint,9,opt,name=mount_val,json=mountVal,proto3" json:"mount_val,omitempty"`
}

func (x *EventCard) Reset() {
	*x = EventCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCard) ProtoMessage() {}

func (x *EventCard) ProtoReflect() protoreflect.Message {
	mi := &file_Data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCard.ProtoReflect.Descriptor instead.
func (*EventCard) Descriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{3}
}

func (x *EventCard) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EventCard) GetUpOption() EventCardType {
	if x != nil {
		return x.UpOption
	}
	return EventCardType_NULL
}

func (x *EventCard) GetUpVal() int32 {
	if x != nil {
		return x.UpVal
	}
	return 0
}

func (x *EventCard) GetDownOption() EventCardType {
	if x != nil {
		return x.DownOption
	}
	return EventCardType_NULL
}

func (x *EventCard) GetDownVal() int32 {
	if x != nil {
		return x.DownVal
	}
	return 0
}

func (x *EventCard) GetPosition() EventCardPos {
	if x != nil {
		return x.Position
	}
	return EventCardPos_BLOCK
}

func (x *EventCard) GetIsInvert() bool {
	if x != nil {
		return x.IsInvert
	}
	return false
}

func (x *EventCard) GetFuncMount() EventCardFunc {
	if x != nil {
		return x.FuncMount
	}
	return EventCardFunc_null
}

func (x *EventCard) GetMountVal() int32 {
	if x != nil {
		return x.MountVal
	}
	return 0
}

type SkillSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FeatNo     int32            `protobuf:"varint,2,opt,name=feat_no,json=featNo,proto3" json:"feat_no,omitempty"`
	Pow        int32            `protobuf:"varint,3,opt,name=pow,proto3" json:"pow,omitempty"`
	CondString string           `protobuf:"bytes,4,opt,name=cond_string,json=condString,proto3" json:"cond_string,omitempty"`
	CondCard   []*SkillCardCond `protobuf:"bytes,5,rep,name=cond_card,json=condCard,proto3" json:"cond_card,omitempty"`
	CondRange  []RangeType      `protobuf:"varint,6,rep,packed,name=cond_range,json=condRange,proto3,enum=ULZProto.RangeType" json:"cond_range,omitempty"`
}

func (x *SkillSet) Reset() {
	*x = SkillSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillSet) ProtoMessage() {}

func (x *SkillSet) ProtoReflect() protoreflect.Message {
	mi := &file_Data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillSet.ProtoReflect.Descriptor instead.
func (*SkillSet) Descriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{4}
}

func (x *SkillSet) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SkillSet) GetFeatNo() int32 {
	if x != nil {
		return x.FeatNo
	}
	return 0
}

func (x *SkillSet) GetPow() int32 {
	if x != nil {
		return x.Pow
	}
	return 0
}

func (x *SkillSet) GetCondString() string {
	if x != nil {
		return x.CondString
	}
	return ""
}

func (x *SkillSet) GetCondCard() []*SkillCardCond {
	if x != nil {
		return x.CondCard
	}
	return nil
}

func (x *SkillSet) GetCondRange() []RangeType {
	if x != nil {
		return x.CondRange
	}
	return nil
}

type SkillCardCond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    EventCardType `protobuf:"varint,1,opt,name=type,proto3,enum=ULZProto.EventCardType" json:"type,omitempty"`
	Val     int32         `protobuf:"varint,2,opt,name=val,proto3" json:"val,omitempty"`
	Compare SignEq        `protobuf:"varint,3,opt,name=compare,proto3,enum=ULZProto.SignEq" json:"compare,omitempty"`
}

func (x *SkillCardCond) Reset() {
	*x = SkillCardCond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillCardCond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillCardCond) ProtoMessage() {}

func (x *SkillCardCond) ProtoReflect() protoreflect.Message {
	mi := &file_Data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillCardCond.ProtoReflect.Descriptor instead.
func (*SkillCardCond) Descriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{5}
}

func (x *SkillCardCond) GetType() EventCardType {
	if x != nil {
		return x.Type
	}
	return EventCardType_NULL
}

func (x *SkillCardCond) GetVal() int32 {
	if x != nil {
		return x.Val
	}
	return 0
}

func (x *SkillCardCond) GetCompare() SignEq {
	if x != nil {
		return x.Compare
	}
	return SignEq_EQUAL
}

// sprite-display
type StatusSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StatusId string `protobuf:"bytes,2,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	RemainCd int32  `protobuf:"varint,3,opt,name=remain_cd,json=remainCd,proto3" json:"remain_cd,omitempty"`
	FeatNo   int32  `protobuf:"varint,4,opt,name=feat_no,json=featNo,proto3" json:"feat_no,omitempty"`
	Pow      int32  `protobuf:"varint,5,opt,name=pow,proto3" json:"pow,omitempty"`
}

func (x *StatusSet) Reset() {
	*x = StatusSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusSet) ProtoMessage() {}

func (x *StatusSet) ProtoReflect() protoreflect.Message {
	mi := &file_Data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusSet.ProtoReflect.Descriptor instead.
func (*StatusSet) Descriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{6}
}

func (x *StatusSet) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StatusSet) GetStatusId() string {
	if x != nil {
		return x.StatusId
	}
	return ""
}

func (x *StatusSet) GetRemainCd() int32 {
	if x != nil {
		return x.RemainCd
	}
	return 0
}

func (x *StatusSet) GetFeatNo() int32 {
	if x != nil {
		return x.FeatNo
	}
	return 0
}

func (x *StatusSet) GetPow() int32 {
	if x != nil {
		return x.Pow
	}
	return 0
}

type EffectResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// targer
	TarCard int32      `protobuf:"varint,1,opt,name=tar_card,json=tarCard,proto3" json:"tar_card,omitempty"`
	TarSide PlayerSide `protobuf:"varint,2,opt,name=tar_side,json=tarSide,proto3,enum=ULZProto.PlayerSide" json:"tar_side,omitempty"`
	// trigger-time
	TriggerTime *EffectTiming `protobuf:"bytes,3,opt,name=trigger_time,json=triggerTime,proto3" json:"trigger_time,omitempty"`
	EndTime     *EffectTiming `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// effect
	EfOption      EffectOption `protobuf:"varint,5,opt,name=ef_option,json=efOption,proto3,enum=ULZProto.EffectOption" json:"ef_option,omitempty"`
	Hp            int32        `protobuf:"varint,6,opt,name=hp,proto3" json:"hp,omitempty"`
	Ap            int32        `protobuf:"varint,7,opt,name=ap,proto3" json:"ap,omitempty"`
	Dp            int32        `protobuf:"varint,8,opt,name=dp,proto3" json:"dp,omitempty"`
	Mp            int32        `protobuf:"varint,9,opt,name=mp,proto3" json:"mp,omitempty"`
	DisableMove   bool         `protobuf:"varint,10,opt,name=disable_move,json=disableMove,proto3" json:"disable_move,omitempty"`
	DisableAtk    bool         `protobuf:"varint,11,opt,name=disable_atk,json=disableAtk,proto3" json:"disable_atk,omitempty"`
	DisableDef    bool         `protobuf:"varint,12,opt,name=disable_def,json=disableDef,proto3" json:"disable_def,omitempty"`
	DisableDraw   bool         `protobuf:"varint,13,opt,name=disable_draw,json=disableDraw,proto3" json:"disable_draw,omitempty"`
	DisableChange bool         `protobuf:"varint,14,opt,name=disable_change,json=disableChange,proto3" json:"disable_change,omitempty"`
	BindingFunc   string       `protobuf:"bytes,15,opt,name=binding_func,json=bindingFunc,proto3" json:"binding_func,omitempty"`
	//
	RemainCd   int32  `protobuf:"varint,16,opt,name=remain_cd,json=remainCd,proto3" json:"remain_cd,omitempty"`
	AssignFrom string `protobuf:"bytes,17,opt,name=assign_from,json=assignFrom,proto3" json:"assign_from,omitempty"`
	SkillId    int32  `protobuf:"varint,18,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	StatusId   int32  `protobuf:"varint,19,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
}

func (x *EffectResult) Reset() {
	*x = EffectResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffectResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffectResult) ProtoMessage() {}

func (x *EffectResult) ProtoReflect() protoreflect.Message {
	mi := &file_Data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffectResult.ProtoReflect.Descriptor instead.
func (*EffectResult) Descriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{7}
}

func (x *EffectResult) GetTarCard() int32 {
	if x != nil {
		return x.TarCard
	}
	return 0
}

func (x *EffectResult) GetTarSide() PlayerSide {
	if x != nil {
		return x.TarSide
	}
	return PlayerSide_HOST
}

func (x *EffectResult) GetTriggerTime() *EffectTiming {
	if x != nil {
		return x.TriggerTime
	}
	return nil
}

func (x *EffectResult) GetEndTime() *EffectTiming {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *EffectResult) GetEfOption() EffectOption {
	if x != nil {
		return x.EfOption
	}
	return EffectOption_Status_Addition
}

func (x *EffectResult) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *EffectResult) GetAp() int32 {
	if x != nil {
		return x.Ap
	}
	return 0
}

func (x *EffectResult) GetDp() int32 {
	if x != nil {
		return x.Dp
	}
	return 0
}

func (x *EffectResult) GetMp() int32 {
	if x != nil {
		return x.Mp
	}
	return 0
}

func (x *EffectResult) GetDisableMove() bool {
	if x != nil {
		return x.DisableMove
	}
	return false
}

func (x *EffectResult) GetDisableAtk() bool {
	if x != nil {
		return x.DisableAtk
	}
	return false
}

func (x *EffectResult) GetDisableDef() bool {
	if x != nil {
		return x.DisableDef
	}
	return false
}

func (x *EffectResult) GetDisableDraw() bool {
	if x != nil {
		return x.DisableDraw
	}
	return false
}

func (x *EffectResult) GetDisableChange() bool {
	if x != nil {
		return x.DisableChange
	}
	return false
}

func (x *EffectResult) GetBindingFunc() string {
	if x != nil {
		return x.BindingFunc
	}
	return ""
}

func (x *EffectResult) GetRemainCd() int32 {
	if x != nil {
		return x.RemainCd
	}
	return 0
}

func (x *EffectResult) GetAssignFrom() string {
	if x != nil {
		return x.AssignFrom
	}
	return ""
}

func (x *EffectResult) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *EffectResult) GetStatusId() int32 {
	if x != nil {
		return x.StatusId
	}
	return 0
}

type EffectTiming struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventPhase EventHookPhase `protobuf:"varint,1,opt,name=event_phase,json=eventPhase,proto3,enum=ULZProto.EventHookPhase" json:"event_phase,omitempty"`
	HookType   EventHookType  `protobuf:"varint,2,opt,name=hook_type,json=hookType,proto3,enum=ULZProto.EventHookType" json:"hook_type,omitempty"`
	SubCount   int32          `protobuf:"varint,3,opt,name=sub_count,json=subCount,proto3" json:"sub_count,omitempty"`
}

func (x *EffectTiming) Reset() {
	*x = EffectTiming{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffectTiming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffectTiming) ProtoMessage() {}

func (x *EffectTiming) ProtoReflect() protoreflect.Message {
	mi := &file_Data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffectTiming.ProtoReflect.Descriptor instead.
func (*EffectTiming) Descriptor() ([]byte, []int) {
	return file_Data_proto_rawDescGZIP(), []int{8}
}

func (x *EffectTiming) GetEventPhase() EventHookPhase {
	if x != nil {
		return x.EventPhase
	}
	return EventHookPhase_gameset_start
}

func (x *EffectTiming) GetHookType() EventHookType {
	if x != nil {
		return x.HookType
	}
	return EventHookType_Instant
}

func (x *EffectTiming) GetSubCount() int32 {
	if x != nil {
		return x.SubCount
	}
	return 0
}

var File_Data_proto protoreflect.FileDescriptor

var file_Data_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x55, 0x4c,
	0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6f,
	0x6b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x06, 0x0a,
	0x0b, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x75, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x3b, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x44,
	0x65, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x0e, 0x64, 0x75, 0x65, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x55, 0x4c,
	0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x43, 0x61, 0x72, 0x64, 0x53,
	0x65, 0x74, 0x52, 0x0c, 0x64, 0x75, 0x65, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b,
	0x12, 0x2b, 0x0a, 0x12, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x68, 0x6f,
	0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a,
	0x12, 0x64, 0x75, 0x65, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x75, 0x65, 0x6c, 0x43,
	0x75, 0x72, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x14, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65,
	0x63, 0x6b, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x11, 0x68,
	0x6f, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b,
	0x12, 0x44, 0x0a, 0x14, 0x64, 0x75, 0x65, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x11, 0x64, 0x75, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x76, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6e, 0x76, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x55, 0x4c, 0x5a, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x52,
	0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x33, 0x0a, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09,
	0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x55, 0x4c, 0x5a,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x22, 0xd4, 0x02, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x61, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61,
	0x70, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x70, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x70, 0x4f, 0x72, 0x69, 0x67,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x70, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x64, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x34, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x65, 0x71, 0x75, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x43, 0x61, 0x72, 0x64, 0x45, 0x71, 0x75, 0x53, 0x65, 0x74,
	0x52, 0x06, 0x65, 0x71, 0x75, 0x53, 0x65, 0x74, 0x22, 0x57, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x45, 0x71, 0x75, 0x53, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x71,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x71, 0x75, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x68,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x61,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x64,
	0x70, 0x22, 0xe3, 0x02, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x34, 0x0a, 0x09, 0x75, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x70, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x75, 0x70, 0x56, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x0b,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x6f, 0x77, 0x6e, 0x56, 0x61,
	0x6c, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x52,
	0x09, 0x66, 0x75, 0x6e, 0x63, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x22, 0xd0, 0x01, 0x0a, 0x08, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x5f, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x77, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x34, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x55, 0x4c, 0x5a,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x7a, 0x0a, 0x0d, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x55, 0x4c, 0x5a, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x55, 0x4c,
	0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x45, 0x71, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x66, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x77, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x77, 0x22, 0x85, 0x05, 0x0a, 0x0c, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61,
	0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x5f, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x52, 0x07, 0x74,
	0x61, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x55,
	0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x65, 0x66, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x65, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x68, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x64, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x6b, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x61,
	0x77, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x64, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x09, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x6f, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x2a, 0x22, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x55, 0x45, 0x4c,
	0x45, 0x52, 0x10, 0x01, 0x2a, 0x4f, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x45, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x55, 0x4e, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x54, 0x41, 0x52, 0x10, 0x05, 0x2a, 0x3f, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x4f, 0x55, 0x54, 0x53, 0x49, 0x44, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x53,
	0x54, 0x52, 0x4f, 0x59, 0x10, 0x03, 0x2a, 0x2c, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f,
	0x4e, 0x47, 0x10, 0x02, 0x2a, 0x4c, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x4f, 0x70, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x42, 0x41, 0x43, 0x4b, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x54, 0x41, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x04, 0x2a, 0xd4, 0x01, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x46, 0x75, 0x6e, 0x63, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x5f, 0x71, 0x75, 0x69, 0x63,
	0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x6f, 0x63, 0x63,
	0x75, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x05,
	0x12, 0x17, 0x0a, 0x13, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x69, 0x63,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x6f, 0x63, 0x63,
	0x75, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x10,
	0x07, 0x12, 0x16, 0x0a, 0x12, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x08, 0x2a, 0x35, 0x0a, 0x06, 0x53, 0x69, 0x67,
	0x6e, 0x45, 0x71, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4c,
	0x45, 0x53, 0x53, 0x45, 0x52, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x03,
	0x2a, 0x67, 0x0a, 0x0c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x46, 0x69, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x48, 0x61, 0x72, 0x64, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x03, 0x42, 0x1d, 0x5a, 0x07, 0x2e, 0x3b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0xaa, 0x02, 0x11, 0x55, 0x4c, 0x5a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Data_proto_rawDescOnce sync.Once
	file_Data_proto_rawDescData = file_Data_proto_rawDesc
)

func file_Data_proto_rawDescGZIP() []byte {
	file_Data_proto_rawDescOnce.Do(func() {
		file_Data_proto_rawDescData = protoimpl.X.CompressGZIP(file_Data_proto_rawDescData)
	})
	return file_Data_proto_rawDescData
}

var file_Data_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_Data_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_Data_proto_goTypes = []interface{}{
	(PlayerSide)(0),        // 0: ULZProto.PlayerSide
	(EventCardType)(0),     // 1: ULZProto.EventCardType
	(EventCardPos)(0),      // 2: ULZProto.EventCardPos
	(RangeType)(0),         // 3: ULZProto.RangeType
	(MovePhaseOpt)(0),      // 4: ULZProto.MovePhaseOpt
	(EventCardFunc)(0),     // 5: ULZProto.EventCardFunc
	(SignEq)(0),            // 6: ULZProto.SignEq
	(EffectOption)(0),      // 7: ULZProto.EffectOption
	(*GameDataSet)(nil),    // 8: ULZProto.GameDataSet
	(*CharCardSet)(nil),    // 9: ULZProto.CharCardSet
	(*CharCardEquSet)(nil), // 10: ULZProto.CharCardEquSet
	(*EventCard)(nil),      // 11: ULZProto.EventCard
	(*SkillSet)(nil),       // 12: ULZProto.SkillSet
	(*SkillCardCond)(nil),  // 13: ULZProto.SkillCardCond
	(*StatusSet)(nil),      // 14: ULZProto.StatusSet
	(*EffectResult)(nil),   // 15: ULZProto.EffectResult
	(*EffectTiming)(nil),   // 16: ULZProto.EffectTiming
	(EventHookPhase)(0),    // 17: ULZProto.EventHookPhase
	(EventHookType)(0),     // 18: ULZProto.EventHookType
}
var file_Data_proto_depIdxs = []int32{
	9,  // 0: ULZProto.GameDataSet.host_card_deck:type_name -> ULZProto.CharCardSet
	9,  // 1: ULZProto.GameDataSet.duel_card_deck:type_name -> ULZProto.CharCardSet
	11, // 2: ULZProto.GameDataSet.host_event_card_deck:type_name -> ULZProto.EventCard
	11, // 3: ULZProto.GameDataSet.duel_event_card_deck:type_name -> ULZProto.EventCard
	3,  // 4: ULZProto.GameDataSet.range:type_name -> ULZProto.RangeType
	0,  // 5: ULZProto.GameDataSet.first_attack:type_name -> ULZProto.PlayerSide
	0,  // 6: ULZProto.GameDataSet.curr_phase:type_name -> ULZProto.PlayerSide
	17, // 7: ULZProto.GameDataSet.event_phase:type_name -> ULZProto.EventHookPhase
	18, // 8: ULZProto.GameDataSet.hook_type:type_name -> ULZProto.EventHookType
	15, // 9: ULZProto.GameDataSet.effect_counter:type_name -> ULZProto.EffectResult
	14, // 10: ULZProto.CharCardSet.status_inst:type_name -> ULZProto.StatusSet
	10, // 11: ULZProto.CharCardSet.equ_set:type_name -> ULZProto.CharCardEquSet
	1,  // 12: ULZProto.EventCard.up_option:type_name -> ULZProto.EventCardType
	1,  // 13: ULZProto.EventCard.down_option:type_name -> ULZProto.EventCardType
	2,  // 14: ULZProto.EventCard.position:type_name -> ULZProto.EventCardPos
	5,  // 15: ULZProto.EventCard.func_mount:type_name -> ULZProto.EventCardFunc
	13, // 16: ULZProto.SkillSet.cond_card:type_name -> ULZProto.SkillCardCond
	3,  // 17: ULZProto.SkillSet.cond_range:type_name -> ULZProto.RangeType
	1,  // 18: ULZProto.SkillCardCond.type:type_name -> ULZProto.EventCardType
	6,  // 19: ULZProto.SkillCardCond.compare:type_name -> ULZProto.SignEq
	0,  // 20: ULZProto.EffectResult.tar_side:type_name -> ULZProto.PlayerSide
	16, // 21: ULZProto.EffectResult.trigger_time:type_name -> ULZProto.EffectTiming
	16, // 22: ULZProto.EffectResult.end_time:type_name -> ULZProto.EffectTiming
	7,  // 23: ULZProto.EffectResult.ef_option:type_name -> ULZProto.EffectOption
	17, // 24: ULZProto.EffectTiming.event_phase:type_name -> ULZProto.EventHookPhase
	18, // 25: ULZProto.EffectTiming.hook_type:type_name -> ULZProto.EventHookType
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_Data_proto_init() }
func file_Data_proto_init() {
	if File_Data_proto != nil {
		return
	}
	file_EventHookPhase_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameDataSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharCardSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharCardEquSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillCardCond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffectResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffectTiming); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Data_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Data_proto_goTypes,
		DependencyIndexes: file_Data_proto_depIdxs,
		EnumInfos:         file_Data_proto_enumTypes,
		MessageInfos:      file_Data_proto_msgTypes,
	}.Build()
	File_Data_proto = out.File
	file_Data_proto_rawDesc = nil
	file_Data_proto_goTypes = nil
	file_Data_proto_depIdxs = nil
}
