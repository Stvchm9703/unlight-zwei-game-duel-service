// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xdd, 0x6e, 0xda, 0x40,
	0x10, 0x85, 0xd5, 0x4a, 0x6d, 0xd1, 0xb4, 0xd4, 0x78, 0xa5, 0x56, 0xad, 0xe1, 0x19, 0xac, 0x8a,
	0xde, 0x05, 0xa4, 0xc8, 0x78, 0xc1, 0x41, 0x02, 0x89, 0x40, 0xb8, 0xe1, 0x6e, 0x63, 0x06, 0xb0,
	0x84, 0xbd, 0xce, 0xee, 0x42, 0x94, 0x57, 0xca, 0x5b, 0xe5, 0x4d, 0x22, 0xff, 0x00, 0xeb, 0xc4,
	0x06, 0xe5, 0x6e, 0x3d, 0x67, 0xce, 0x37, 0xc7, 0xe3, 0x35, 0xd4, 0x25, 0x8a, 0x7d, 0xe0, 0xa3,
	0x1d, 0x0b, 0xae, 0x38, 0xa9, 0xcd, 0x47, 0x8b, 0x49, 0x72, 0xb2, 0xea, 0x21, 0x4a, 0xc9, 0xd6,
	0xb9, 0x60, 0xfd, 0xf0, 0x79, 0x18, 0xf2, 0x28, 0x7f, 0x02, 0xca, 0x14, 0xcb, 0xce, 0xed, 0x97,
	0x6f, 0x60, 0x78, 0x2c, 0x44, 0xba, 0xc3, 0xed, 0x2c, 0x83, 0x91, 0x01, 0x18, 0xc9, 0x11, 0x45,
	0x4f, 0x70, 0xb6, 0xf4, 0x99, 0x54, 0xe4, 0xb7, 0x7d, 0x40, 0xdb, 0x1e, 0xf5, 0x50, 0x0d, 0xa3,
	0x15, 0x9f, 0xe2, 0x83, 0xf5, 0x57, 0xaf, 0x1f, 0xdb, 0xa7, 0x28, 0xe3, 0x7f, 0x9f, 0xc8, 0x15,
	0x80, 0x2b, 0x90, 0x29, 0x4c, 0x06, 0x90, 0x5f, 0x7a, 0x6b, 0x56, 0x4f, 0x08, 0x7a, 0x39, 0xc9,
	0xc1, 0x14, 0x9b, 0xa1, 0x22, 0x5d, 0xf8, 0xee, 0xa1, 0x3a, 0x54, 0x2a, 0xe7, 0x57, 0xb8, 0xdb,
	0x50, 0xbb, 0xdd, 0x05, 0xea, 0xdc, 0x5c, 0xe3, 0x54, 0xee, 0x87, 0xb1, 0x7a, 0x22, 0x1d, 0x68,
	0x0c, 0x23, 0xa9, 0x66, 0xa8, 0xfa, 0x7b, 0x8c, 0x94, 0xcb, 0xc4, 0xb2, 0x38, 0x36, 0x51, 0x59,
	0xe4, 0x23, 0xbd, 0x2b, 0x35, 0x53, 0xc1, 0x1e, 0x27, 0x1b, 0x26, 0xd1, 0xe5, 0xd1, 0x2a, 0x10,
	0x61, 0x65, 0xe6, 0x77, 0xe6, 0x6b, 0x68, 0x8c, 0xf9, 0x1e, 0x0b, 0x66, 0x4b, 0x37, 0x27, 0x6a,
	0x2e, 0x94, 0x02, 0x06, 0x60, 0x1c, 0x01, 0x53, 0x94, 0xbb, 0x6d, 0xf5, 0x07, 0x6b, 0x56, 0x72,
	0x65, 0x4c, 0x3a, 0xf0, 0xd3, 0xa1, 0x85, 0x18, 0x7f, 0xf4, 0x76, 0x87, 0x9e, 0x0b, 0xe1, 0x40,
	0x3d, 0x37, 0x5f, 0x88, 0xf0, 0x86, 0x99, 0x75, 0xa7, 0xf3, 0xfb, 0x60, 0xe6, 0x08, 0x1a, 0xf8,
	0x1f, 0xc4, 0x68, 0x0e, 0x17, 0x88, 0xbb, 0x61, 0xd1, 0xba, 0xb8, 0xd1, 0x56, 0xe1, 0x1e, 0xa4,
	0xfa, 0xb9, 0xd7, 0xe9, 0x82, 0xa9, 0x41, 0x2e, 0x64, 0x29, 0x59, 0x86, 0x99, 0xde, 0xa2, 0x42,
	0x82, 0xc2, 0xee, 0x75, 0xa5, 0x14, 0x71, 0x03, 0x8d, 0x13, 0xe2, 0xc2, 0xfc, 0x56, 0x35, 0x59,
	0xc6, 0xbd, 0xe6, 0xe2, 0x4b, 0xfa, 0xb3, 0x3f, 0x7f, 0x36, 0xe7, 0xa3, 0x85, 0x23, 0x25, 0x2a,
	0x3b, 0x6d, 0x1e, 0xf3, 0xe5, 0xfd, 0xd7, 0x54, 0xfa, 0xff, 0x1a, 0x00, 0x00, 0xff, 0xff, 0x19,
	0x39, 0x19, 0x66, 0x4b, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GameDuelServiceClient is the client API for GameDuelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameDuelServiceClient interface {
	//  Basic Server Function
	ServerBroadcast(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (GameDuelService_ServerBroadcastClient, error)
	CreateGame(ctx context.Context, in *GDCreateReq, opts ...grpc.CallOption) (*GameDataSet, error)
	GetGameData(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GameDataSet, error)
	QuitGame(ctx context.Context, in *GDCreateReq, opts ...grpc.CallOption) (*Empty, error)
	// GameSet Logic Function
	//   instance card move
	InstSetEventCard(ctx context.Context, in *GDInstanceDT, opts ...grpc.CallOption) (*Empty, error)
	// Draw-phase : confirm
	// NOTE: After Broadcast Send <[ refill_action_card_phase ]>,
	//   Client set the event-card by < InstSetEventCard >
	//   { from their deck to own hand };
	//   then, send this < DrawPhaseConfirm > to notify the server
	//   that `client ready to start next phase [move_card_drop_phase]`
	DrawPhaseConfirm(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*Empty, error)
	// Move-phase : confirm
	// NOTE:   After Broadcast Send <[ move_card_drop_phase ]>,
	//   Client set the event-card by < InstSetEventCard >
	//       { from their own hand to out-side };
	//   Then send this < MovePhaseConfirm > to notify the server
	//   that `client ready to start next phase [determine_move_phase]`
	MovePhaseConfirm(ctx context.Context, in *GDMoveConfirmReq, opts ...grpc.CallOption) (*Empty, error)
	MovePhaseResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GDMoveConfirmResp, error)
	ADPhaseConfirm(ctx context.Context, in *GDADConfirmReq, opts ...grpc.CallOption) (*Empty, error)
	ADPhaseResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GDADResultResp, error)
	ADPhaseDiceResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GDADDiceResult, error)
	// ChangeCharaPhase : Confirm and Result
	// FIXME : 3v3 may need it, but 1v1 is not implement;
	ChangePhaseConfirm(ctx context.Context, in *GDChangeConfirmReq, opts ...grpc.CallOption) (*Empty, error)
	// ChangeCharaPhase : Confirm and Result
	// FIXME : 3v3 may need it, but 1v1 is not implement;
	ChangePhaseResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*Empty, error)
	// Event-Phase : Confirm
	// NOTE: Once the Server send any phase notify
	//   the client may send feedback to server that ready for phase
	EventPhaseConfirm(ctx context.Context, in *GDPhaseConfirmReq, opts ...grpc.CallOption) (*Empty, error)
	// Event-Phase : Confirm
	// NOTE: Once the Server send any phase notify
	//   the client may send feedback to server that ready for phase
	EventPhaseResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GDPhaseConfirmResp, error)
}

type gameDuelServiceClient struct {
	cc *grpc.ClientConn
}

func NewGameDuelServiceClient(cc *grpc.ClientConn) GameDuelServiceClient {
	return &gameDuelServiceClient{cc}
}

func (c *gameDuelServiceClient) ServerBroadcast(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (GameDuelService_ServerBroadcastClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GameDuelService_serviceDesc.Streams[0], "/ULZProto.GameDuelService/ServerBroadcast", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameDuelServiceServerBroadcastClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameDuelService_ServerBroadcastClient interface {
	Recv() (*GDBroadcastResp, error)
	grpc.ClientStream
}

type gameDuelServiceServerBroadcastClient struct {
	grpc.ClientStream
}

func (x *gameDuelServiceServerBroadcastClient) Recv() (*GDBroadcastResp, error) {
	m := new(GDBroadcastResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameDuelServiceClient) CreateGame(ctx context.Context, in *GDCreateReq, opts ...grpc.CallOption) (*GameDataSet, error) {
	out := new(GameDataSet)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/CreateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) GetGameData(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GameDataSet, error) {
	out := new(GameDataSet)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/GetGameData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) QuitGame(ctx context.Context, in *GDCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/QuitGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) InstSetEventCard(ctx context.Context, in *GDInstanceDT, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/InstSetEventCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) DrawPhaseConfirm(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/DrawPhaseConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) MovePhaseConfirm(ctx context.Context, in *GDMoveConfirmReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/MovePhaseConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) MovePhaseResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GDMoveConfirmResp, error) {
	out := new(GDMoveConfirmResp)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/MovePhaseResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) ADPhaseConfirm(ctx context.Context, in *GDADConfirmReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/ADPhaseConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) ADPhaseResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GDADResultResp, error) {
	out := new(GDADResultResp)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/ADPhaseResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) ADPhaseDiceResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GDADDiceResult, error) {
	out := new(GDADDiceResult)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/ADPhaseDiceResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) ChangePhaseConfirm(ctx context.Context, in *GDChangeConfirmReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/ChangePhaseConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) ChangePhaseResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/ChangePhaseResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) EventPhaseConfirm(ctx context.Context, in *GDPhaseConfirmReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/EventPhaseConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) EventPhaseResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GDPhaseConfirmResp, error) {
	out := new(GDPhaseConfirmResp)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/EventPhaseResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameDuelServiceServer is the server API for GameDuelService service.
type GameDuelServiceServer interface {
	//  Basic Server Function
	ServerBroadcast(*GDGetInfoReq, GameDuelService_ServerBroadcastServer) error
	CreateGame(context.Context, *GDCreateReq) (*GameDataSet, error)
	GetGameData(context.Context, *GDGetInfoReq) (*GameDataSet, error)
	QuitGame(context.Context, *GDCreateReq) (*Empty, error)
	// GameSet Logic Function
	//   instance card move
	InstSetEventCard(context.Context, *GDInstanceDT) (*Empty, error)
	// Draw-phase : confirm
	// NOTE: After Broadcast Send <[ refill_action_card_phase ]>,
	//   Client set the event-card by < InstSetEventCard >
	//   { from their deck to own hand };
	//   then, send this < DrawPhaseConfirm > to notify the server
	//   that `client ready to start next phase [move_card_drop_phase]`
	DrawPhaseConfirm(context.Context, *GDGetInfoReq) (*Empty, error)
	// Move-phase : confirm
	// NOTE:   After Broadcast Send <[ move_card_drop_phase ]>,
	//   Client set the event-card by < InstSetEventCard >
	//       { from their own hand to out-side };
	//   Then send this < MovePhaseConfirm > to notify the server
	//   that `client ready to start next phase [determine_move_phase]`
	MovePhaseConfirm(context.Context, *GDMoveConfirmReq) (*Empty, error)
	MovePhaseResult(context.Context, *GDGetInfoReq) (*GDMoveConfirmResp, error)
	ADPhaseConfirm(context.Context, *GDADConfirmReq) (*Empty, error)
	ADPhaseResult(context.Context, *GDGetInfoReq) (*GDADResultResp, error)
	ADPhaseDiceResult(context.Context, *GDGetInfoReq) (*GDADDiceResult, error)
	// ChangeCharaPhase : Confirm and Result
	// FIXME : 3v3 may need it, but 1v1 is not implement;
	ChangePhaseConfirm(context.Context, *GDChangeConfirmReq) (*Empty, error)
	// ChangeCharaPhase : Confirm and Result
	// FIXME : 3v3 may need it, but 1v1 is not implement;
	ChangePhaseResult(context.Context, *GDGetInfoReq) (*Empty, error)
	// Event-Phase : Confirm
	// NOTE: Once the Server send any phase notify
	//   the client may send feedback to server that ready for phase
	EventPhaseConfirm(context.Context, *GDPhaseConfirmReq) (*Empty, error)
	// Event-Phase : Confirm
	// NOTE: Once the Server send any phase notify
	//   the client may send feedback to server that ready for phase
	EventPhaseResult(context.Context, *GDGetInfoReq) (*GDPhaseConfirmResp, error)
}

// UnimplementedGameDuelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGameDuelServiceServer struct {
}

func (*UnimplementedGameDuelServiceServer) ServerBroadcast(req *GDGetInfoReq, srv GameDuelService_ServerBroadcastServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerBroadcast not implemented")
}
func (*UnimplementedGameDuelServiceServer) CreateGame(ctx context.Context, req *GDCreateReq) (*GameDataSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (*UnimplementedGameDuelServiceServer) GetGameData(ctx context.Context, req *GDGetInfoReq) (*GameDataSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameData not implemented")
}
func (*UnimplementedGameDuelServiceServer) QuitGame(ctx context.Context, req *GDCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitGame not implemented")
}
func (*UnimplementedGameDuelServiceServer) InstSetEventCard(ctx context.Context, req *GDInstanceDT) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstSetEventCard not implemented")
}
func (*UnimplementedGameDuelServiceServer) DrawPhaseConfirm(ctx context.Context, req *GDGetInfoReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrawPhaseConfirm not implemented")
}
func (*UnimplementedGameDuelServiceServer) MovePhaseConfirm(ctx context.Context, req *GDMoveConfirmReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovePhaseConfirm not implemented")
}
func (*UnimplementedGameDuelServiceServer) MovePhaseResult(ctx context.Context, req *GDGetInfoReq) (*GDMoveConfirmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovePhaseResult not implemented")
}
func (*UnimplementedGameDuelServiceServer) ADPhaseConfirm(ctx context.Context, req *GDADConfirmReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADPhaseConfirm not implemented")
}
func (*UnimplementedGameDuelServiceServer) ADPhaseResult(ctx context.Context, req *GDGetInfoReq) (*GDADResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADPhaseResult not implemented")
}
func (*UnimplementedGameDuelServiceServer) ADPhaseDiceResult(ctx context.Context, req *GDGetInfoReq) (*GDADDiceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADPhaseDiceResult not implemented")
}
func (*UnimplementedGameDuelServiceServer) ChangePhaseConfirm(ctx context.Context, req *GDChangeConfirmReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePhaseConfirm not implemented")
}
func (*UnimplementedGameDuelServiceServer) ChangePhaseResult(ctx context.Context, req *GDGetInfoReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePhaseResult not implemented")
}
func (*UnimplementedGameDuelServiceServer) EventPhaseConfirm(ctx context.Context, req *GDPhaseConfirmReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventPhaseConfirm not implemented")
}
func (*UnimplementedGameDuelServiceServer) EventPhaseResult(ctx context.Context, req *GDGetInfoReq) (*GDPhaseConfirmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventPhaseResult not implemented")
}

func RegisterGameDuelServiceServer(s *grpc.Server, srv GameDuelServiceServer) {
	s.RegisterService(&_GameDuelService_serviceDesc, srv)
}

func _GameDuelService_ServerBroadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GDGetInfoReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameDuelServiceServer).ServerBroadcast(m, &gameDuelServiceServerBroadcastServer{stream})
}

type GameDuelService_ServerBroadcastServer interface {
	Send(*GDBroadcastResp) error
	grpc.ServerStream
}

type gameDuelServiceServerBroadcastServer struct {
	grpc.ServerStream
}

func (x *gameDuelServiceServerBroadcastServer) Send(m *GDBroadcastResp) error {
	return x.ServerStream.SendMsg(m)
}

func _GameDuelService_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/CreateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).CreateGame(ctx, req.(*GDCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_GetGameData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).GetGameData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/GetGameData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).GetGameData(ctx, req.(*GDGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_QuitGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).QuitGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/QuitGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).QuitGame(ctx, req.(*GDCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_InstSetEventCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDInstanceDT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).InstSetEventCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/InstSetEventCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).InstSetEventCard(ctx, req.(*GDInstanceDT))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_DrawPhaseConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).DrawPhaseConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/DrawPhaseConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).DrawPhaseConfirm(ctx, req.(*GDGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_MovePhaseConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDMoveConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).MovePhaseConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/MovePhaseConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).MovePhaseConfirm(ctx, req.(*GDMoveConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_MovePhaseResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).MovePhaseResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/MovePhaseResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).MovePhaseResult(ctx, req.(*GDGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_ADPhaseConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDADConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).ADPhaseConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/ADPhaseConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).ADPhaseConfirm(ctx, req.(*GDADConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_ADPhaseResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).ADPhaseResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/ADPhaseResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).ADPhaseResult(ctx, req.(*GDGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_ADPhaseDiceResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).ADPhaseDiceResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/ADPhaseDiceResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).ADPhaseDiceResult(ctx, req.(*GDGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_ChangePhaseConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDChangeConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).ChangePhaseConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/ChangePhaseConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).ChangePhaseConfirm(ctx, req.(*GDChangeConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_ChangePhaseResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).ChangePhaseResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/ChangePhaseResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).ChangePhaseResult(ctx, req.(*GDGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_EventPhaseConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDPhaseConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).EventPhaseConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/EventPhaseConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).EventPhaseConfirm(ctx, req.(*GDPhaseConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_EventPhaseResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).EventPhaseResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/EventPhaseResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).EventPhaseResult(ctx, req.(*GDGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameDuelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ULZProto.GameDuelService",
	HandlerType: (*GameDuelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGame",
			Handler:    _GameDuelService_CreateGame_Handler,
		},
		{
			MethodName: "GetGameData",
			Handler:    _GameDuelService_GetGameData_Handler,
		},
		{
			MethodName: "QuitGame",
			Handler:    _GameDuelService_QuitGame_Handler,
		},
		{
			MethodName: "InstSetEventCard",
			Handler:    _GameDuelService_InstSetEventCard_Handler,
		},
		{
			MethodName: "DrawPhaseConfirm",
			Handler:    _GameDuelService_DrawPhaseConfirm_Handler,
		},
		{
			MethodName: "MovePhaseConfirm",
			Handler:    _GameDuelService_MovePhaseConfirm_Handler,
		},
		{
			MethodName: "MovePhaseResult",
			Handler:    _GameDuelService_MovePhaseResult_Handler,
		},
		{
			MethodName: "ADPhaseConfirm",
			Handler:    _GameDuelService_ADPhaseConfirm_Handler,
		},
		{
			MethodName: "ADPhaseResult",
			Handler:    _GameDuelService_ADPhaseResult_Handler,
		},
		{
			MethodName: "ADPhaseDiceResult",
			Handler:    _GameDuelService_ADPhaseDiceResult_Handler,
		},
		{
			MethodName: "ChangePhaseConfirm",
			Handler:    _GameDuelService_ChangePhaseConfirm_Handler,
		},
		{
			MethodName: "ChangePhaseResult",
			Handler:    _GameDuelService_ChangePhaseResult_Handler,
		},
		{
			MethodName: "EventPhaseConfirm",
			Handler:    _GameDuelService_EventPhaseConfirm_Handler,
		},
		{
			MethodName: "EventPhaseResult",
			Handler:    _GameDuelService_EventPhaseResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerBroadcast",
			Handler:       _GameDuelService_ServerBroadcast_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
