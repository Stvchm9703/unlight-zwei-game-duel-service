// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.10.0
// source: service.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x32, 0xe1, 0x07, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x65, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x55, 0x4c, 0x5a, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x44, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x44, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x30, 0x01, 0x12, 0x3a,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x2e, 0x55,
	0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x44, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x2e, 0x55, 0x4c, 0x5a, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x44, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x1a, 0x15, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x51, 0x75, 0x69, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x44, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x55, 0x4c,
	0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x10,
	0x49, 0x6e, 0x73, 0x74, 0x53, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x16, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x44, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x54, 0x1a, 0x0f, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x10, 0x44, 0x72, 0x61,
	0x77, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x16, 0x2e,
	0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x44, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x10, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x1a, 0x2e, 0x55, 0x4c, 0x5a,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x44, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0f, 0x4d, 0x6f, 0x76, 0x65, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x2e, 0x55, 0x4c, 0x5a,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x44, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x44,
	0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3b, 0x0a, 0x0e, 0x41, 0x44, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x12, 0x18, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x44, 0x41,
	0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x55, 0x4c,
	0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0d,
	0x41, 0x44, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x2e,
	0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x44, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x44, 0x41, 0x44, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x45, 0x0a, 0x11, 0x41, 0x44, 0x50, 0x68, 0x61, 0x73, 0x65, 0x44, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x44, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x55,
	0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x44, 0x41, 0x44, 0x44, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x1c, 0x2e, 0x55,
	0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x44, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x55, 0x4c, 0x5a,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x11, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x16, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x44, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x11, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x1b,
	0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x44, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x55, 0x4c,
	0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x10,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x16, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x44, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x55, 0x4c, 0x5a, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x44, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x42, 0x1d, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0xaa, 0x02, 0x11, 0x55, 0x4c, 0x5a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_service_proto_goTypes = []interface{}{
	(*GDGetInfoReq)(nil),       // 0: ULZProto.GDGetInfoReq
	(*GDCreateReq)(nil),        // 1: ULZProto.GDCreateReq
	(*GDInstanceDT)(nil),       // 2: ULZProto.GDInstanceDT
	(*GDMoveConfirmReq)(nil),   // 3: ULZProto.GDMoveConfirmReq
	(*GDADConfirmReq)(nil),     // 4: ULZProto.GDADConfirmReq
	(*GDChangeConfirmReq)(nil), // 5: ULZProto.GDChangeConfirmReq
	(*GDPhaseConfirmReq)(nil),  // 6: ULZProto.GDPhaseConfirmReq
	(*GDBroadcastResp)(nil),    // 7: ULZProto.GDBroadcastResp
	(*GameDataSet)(nil),        // 8: ULZProto.GameDataSet
	(*Empty)(nil),              // 9: ULZProto.Empty
	(*GDMoveConfirmResp)(nil),  // 10: ULZProto.GDMoveConfirmResp
	(*GDADResultResp)(nil),     // 11: ULZProto.GDADResultResp
	(*GDADDiceResult)(nil),     // 12: ULZProto.GDADDiceResult
	(*GDPhaseConfirmResp)(nil), // 13: ULZProto.GDPhaseConfirmResp
}
var file_service_proto_depIdxs = []int32{
	0,  // 0: ULZProto.GameDuelService.ServerBroadcast:input_type -> ULZProto.GDGetInfoReq
	1,  // 1: ULZProto.GameDuelService.CreateGame:input_type -> ULZProto.GDCreateReq
	0,  // 2: ULZProto.GameDuelService.GetGameData:input_type -> ULZProto.GDGetInfoReq
	1,  // 3: ULZProto.GameDuelService.QuitGame:input_type -> ULZProto.GDCreateReq
	2,  // 4: ULZProto.GameDuelService.InstSetEventCard:input_type -> ULZProto.GDInstanceDT
	0,  // 5: ULZProto.GameDuelService.DrawPhaseConfirm:input_type -> ULZProto.GDGetInfoReq
	3,  // 6: ULZProto.GameDuelService.MovePhaseConfirm:input_type -> ULZProto.GDMoveConfirmReq
	0,  // 7: ULZProto.GameDuelService.MovePhaseResult:input_type -> ULZProto.GDGetInfoReq
	4,  // 8: ULZProto.GameDuelService.ADPhaseConfirm:input_type -> ULZProto.GDADConfirmReq
	0,  // 9: ULZProto.GameDuelService.ADPhaseResult:input_type -> ULZProto.GDGetInfoReq
	0,  // 10: ULZProto.GameDuelService.ADPhaseDiceResult:input_type -> ULZProto.GDGetInfoReq
	5,  // 11: ULZProto.GameDuelService.ChangePhaseConfirm:input_type -> ULZProto.GDChangeConfirmReq
	0,  // 12: ULZProto.GameDuelService.ChangePhaseResult:input_type -> ULZProto.GDGetInfoReq
	6,  // 13: ULZProto.GameDuelService.EventPhaseConfirm:input_type -> ULZProto.GDPhaseConfirmReq
	0,  // 14: ULZProto.GameDuelService.EventPhaseResult:input_type -> ULZProto.GDGetInfoReq
	7,  // 15: ULZProto.GameDuelService.ServerBroadcast:output_type -> ULZProto.GDBroadcastResp
	8,  // 16: ULZProto.GameDuelService.CreateGame:output_type -> ULZProto.GameDataSet
	8,  // 17: ULZProto.GameDuelService.GetGameData:output_type -> ULZProto.GameDataSet
	9,  // 18: ULZProto.GameDuelService.QuitGame:output_type -> ULZProto.Empty
	9,  // 19: ULZProto.GameDuelService.InstSetEventCard:output_type -> ULZProto.Empty
	9,  // 20: ULZProto.GameDuelService.DrawPhaseConfirm:output_type -> ULZProto.Empty
	9,  // 21: ULZProto.GameDuelService.MovePhaseConfirm:output_type -> ULZProto.Empty
	10, // 22: ULZProto.GameDuelService.MovePhaseResult:output_type -> ULZProto.GDMoveConfirmResp
	9,  // 23: ULZProto.GameDuelService.ADPhaseConfirm:output_type -> ULZProto.Empty
	11, // 24: ULZProto.GameDuelService.ADPhaseResult:output_type -> ULZProto.GDADResultResp
	12, // 25: ULZProto.GameDuelService.ADPhaseDiceResult:output_type -> ULZProto.GDADDiceResult
	9,  // 26: ULZProto.GameDuelService.ChangePhaseConfirm:output_type -> ULZProto.Empty
	9,  // 27: ULZProto.GameDuelService.ChangePhaseResult:output_type -> ULZProto.Empty
	9,  // 28: ULZProto.GameDuelService.EventPhaseConfirm:output_type -> ULZProto.Empty
	13, // 29: ULZProto.GameDuelService.EventPhaseResult:output_type -> ULZProto.GDPhaseConfirmResp
	15, // [15:30] is the sub-list for method output_type
	0,  // [0:15] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	file_message_proto_init()
	file_common_proto_init()
	file_Data_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GameDuelServiceClient is the client API for GameDuelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameDuelServiceClient interface {
	//  Basic Server Function
	ServerBroadcast(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (GameDuelService_ServerBroadcastClient, error)
	CreateGame(ctx context.Context, in *GDCreateReq, opts ...grpc.CallOption) (*GameDataSet, error)
	GetGameData(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GameDataSet, error)
	QuitGame(ctx context.Context, in *GDCreateReq, opts ...grpc.CallOption) (*Empty, error)
	// GameSet Logic Function
	//   instance card move
	InstSetEventCard(ctx context.Context, in *GDInstanceDT, opts ...grpc.CallOption) (*Empty, error)
	// Draw-phase : confirm
	// NOTE: After Broadcast Send <[ refill_action_card_phase ]>,
	//   Client set the event-card by < InstSetEventCard >
	//   { from their deck to own hand };
	//   then, send this < DrawPhaseConfirm > to notify the server
	//   that `client ready to start next phase [move_card_drop_phase]`
	DrawPhaseConfirm(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*Empty, error)
	// Move-phase : confirm
	// NOTE:   After Broadcast Send <[ move_card_drop_phase ]>,
	//   Client set the event-card by < InstSetEventCard >
	//       { from their own hand to out-side };
	//   Then send this < MovePhaseConfirm > to notify the server
	//   that `client ready to start next phase [determine_move_phase]`
	MovePhaseConfirm(ctx context.Context, in *GDMoveConfirmReq, opts ...grpc.CallOption) (*Empty, error)
	MovePhaseResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GDMoveConfirmResp, error)
	ADPhaseConfirm(ctx context.Context, in *GDADConfirmReq, opts ...grpc.CallOption) (*Empty, error)
	ADPhaseResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GDADResultResp, error)
	ADPhaseDiceResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GDADDiceResult, error)
	// ChangeCharaPhase : Confirm and Result
	// FIXME : 3v3 may need it, but 1v1 is not implement;
	ChangePhaseConfirm(ctx context.Context, in *GDChangeConfirmReq, opts ...grpc.CallOption) (*Empty, error)
	// ChangeCharaPhase : Confirm and Result
	// FIXME : 3v3 may need it, but 1v1 is not implement;
	ChangePhaseResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*Empty, error)
	// Event-Phase : Confirm
	// NOTE: Once the Server send any phase notify
	//   the client may send feedback to server that ready for phase
	EventPhaseConfirm(ctx context.Context, in *GDPhaseConfirmReq, opts ...grpc.CallOption) (*Empty, error)
	// Event-Phase : Confirm
	// NOTE: Once the Server send any phase notify
	//   the client may send feedback to server that ready for phase
	EventPhaseResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GDPhaseConfirmResp, error)
}

type gameDuelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameDuelServiceClient(cc grpc.ClientConnInterface) GameDuelServiceClient {
	return &gameDuelServiceClient{cc}
}

func (c *gameDuelServiceClient) ServerBroadcast(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (GameDuelService_ServerBroadcastClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GameDuelService_serviceDesc.Streams[0], "/ULZProto.GameDuelService/ServerBroadcast", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameDuelServiceServerBroadcastClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameDuelService_ServerBroadcastClient interface {
	Recv() (*GDBroadcastResp, error)
	grpc.ClientStream
}

type gameDuelServiceServerBroadcastClient struct {
	grpc.ClientStream
}

func (x *gameDuelServiceServerBroadcastClient) Recv() (*GDBroadcastResp, error) {
	m := new(GDBroadcastResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameDuelServiceClient) CreateGame(ctx context.Context, in *GDCreateReq, opts ...grpc.CallOption) (*GameDataSet, error) {
	out := new(GameDataSet)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/CreateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) GetGameData(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GameDataSet, error) {
	out := new(GameDataSet)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/GetGameData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) QuitGame(ctx context.Context, in *GDCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/QuitGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) InstSetEventCard(ctx context.Context, in *GDInstanceDT, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/InstSetEventCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) DrawPhaseConfirm(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/DrawPhaseConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) MovePhaseConfirm(ctx context.Context, in *GDMoveConfirmReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/MovePhaseConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) MovePhaseResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GDMoveConfirmResp, error) {
	out := new(GDMoveConfirmResp)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/MovePhaseResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) ADPhaseConfirm(ctx context.Context, in *GDADConfirmReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/ADPhaseConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) ADPhaseResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GDADResultResp, error) {
	out := new(GDADResultResp)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/ADPhaseResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) ADPhaseDiceResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GDADDiceResult, error) {
	out := new(GDADDiceResult)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/ADPhaseDiceResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) ChangePhaseConfirm(ctx context.Context, in *GDChangeConfirmReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/ChangePhaseConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) ChangePhaseResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/ChangePhaseResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) EventPhaseConfirm(ctx context.Context, in *GDPhaseConfirmReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/EventPhaseConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDuelServiceClient) EventPhaseResult(ctx context.Context, in *GDGetInfoReq, opts ...grpc.CallOption) (*GDPhaseConfirmResp, error) {
	out := new(GDPhaseConfirmResp)
	err := c.cc.Invoke(ctx, "/ULZProto.GameDuelService/EventPhaseResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameDuelServiceServer is the server API for GameDuelService service.
type GameDuelServiceServer interface {
	//  Basic Server Function
	ServerBroadcast(*GDGetInfoReq, GameDuelService_ServerBroadcastServer) error
	CreateGame(context.Context, *GDCreateReq) (*GameDataSet, error)
	GetGameData(context.Context, *GDGetInfoReq) (*GameDataSet, error)
	QuitGame(context.Context, *GDCreateReq) (*Empty, error)
	// GameSet Logic Function
	//   instance card move
	InstSetEventCard(context.Context, *GDInstanceDT) (*Empty, error)
	// Draw-phase : confirm
	// NOTE: After Broadcast Send <[ refill_action_card_phase ]>,
	//   Client set the event-card by < InstSetEventCard >
	//   { from their deck to own hand };
	//   then, send this < DrawPhaseConfirm > to notify the server
	//   that `client ready to start next phase [move_card_drop_phase]`
	DrawPhaseConfirm(context.Context, *GDGetInfoReq) (*Empty, error)
	// Move-phase : confirm
	// NOTE:   After Broadcast Send <[ move_card_drop_phase ]>,
	//   Client set the event-card by < InstSetEventCard >
	//       { from their own hand to out-side };
	//   Then send this < MovePhaseConfirm > to notify the server
	//   that `client ready to start next phase [determine_move_phase]`
	MovePhaseConfirm(context.Context, *GDMoveConfirmReq) (*Empty, error)
	MovePhaseResult(context.Context, *GDGetInfoReq) (*GDMoveConfirmResp, error)
	ADPhaseConfirm(context.Context, *GDADConfirmReq) (*Empty, error)
	ADPhaseResult(context.Context, *GDGetInfoReq) (*GDADResultResp, error)
	ADPhaseDiceResult(context.Context, *GDGetInfoReq) (*GDADDiceResult, error)
	// ChangeCharaPhase : Confirm and Result
	// FIXME : 3v3 may need it, but 1v1 is not implement;
	ChangePhaseConfirm(context.Context, *GDChangeConfirmReq) (*Empty, error)
	// ChangeCharaPhase : Confirm and Result
	// FIXME : 3v3 may need it, but 1v1 is not implement;
	ChangePhaseResult(context.Context, *GDGetInfoReq) (*Empty, error)
	// Event-Phase : Confirm
	// NOTE: Once the Server send any phase notify
	//   the client may send feedback to server that ready for phase
	EventPhaseConfirm(context.Context, *GDPhaseConfirmReq) (*Empty, error)
	// Event-Phase : Confirm
	// NOTE: Once the Server send any phase notify
	//   the client may send feedback to server that ready for phase
	EventPhaseResult(context.Context, *GDGetInfoReq) (*GDPhaseConfirmResp, error)
}

// UnimplementedGameDuelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGameDuelServiceServer struct {
}

func (*UnimplementedGameDuelServiceServer) ServerBroadcast(*GDGetInfoReq, GameDuelService_ServerBroadcastServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerBroadcast not implemented")
}
func (*UnimplementedGameDuelServiceServer) CreateGame(context.Context, *GDCreateReq) (*GameDataSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (*UnimplementedGameDuelServiceServer) GetGameData(context.Context, *GDGetInfoReq) (*GameDataSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameData not implemented")
}
func (*UnimplementedGameDuelServiceServer) QuitGame(context.Context, *GDCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitGame not implemented")
}
func (*UnimplementedGameDuelServiceServer) InstSetEventCard(context.Context, *GDInstanceDT) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstSetEventCard not implemented")
}
func (*UnimplementedGameDuelServiceServer) DrawPhaseConfirm(context.Context, *GDGetInfoReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrawPhaseConfirm not implemented")
}
func (*UnimplementedGameDuelServiceServer) MovePhaseConfirm(context.Context, *GDMoveConfirmReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovePhaseConfirm not implemented")
}
func (*UnimplementedGameDuelServiceServer) MovePhaseResult(context.Context, *GDGetInfoReq) (*GDMoveConfirmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovePhaseResult not implemented")
}
func (*UnimplementedGameDuelServiceServer) ADPhaseConfirm(context.Context, *GDADConfirmReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADPhaseConfirm not implemented")
}
func (*UnimplementedGameDuelServiceServer) ADPhaseResult(context.Context, *GDGetInfoReq) (*GDADResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADPhaseResult not implemented")
}
func (*UnimplementedGameDuelServiceServer) ADPhaseDiceResult(context.Context, *GDGetInfoReq) (*GDADDiceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADPhaseDiceResult not implemented")
}
func (*UnimplementedGameDuelServiceServer) ChangePhaseConfirm(context.Context, *GDChangeConfirmReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePhaseConfirm not implemented")
}
func (*UnimplementedGameDuelServiceServer) ChangePhaseResult(context.Context, *GDGetInfoReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePhaseResult not implemented")
}
func (*UnimplementedGameDuelServiceServer) EventPhaseConfirm(context.Context, *GDPhaseConfirmReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventPhaseConfirm not implemented")
}
func (*UnimplementedGameDuelServiceServer) EventPhaseResult(context.Context, *GDGetInfoReq) (*GDPhaseConfirmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventPhaseResult not implemented")
}

func RegisterGameDuelServiceServer(s *grpc.Server, srv GameDuelServiceServer) {
	s.RegisterService(&_GameDuelService_serviceDesc, srv)
}

func _GameDuelService_ServerBroadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GDGetInfoReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameDuelServiceServer).ServerBroadcast(m, &gameDuelServiceServerBroadcastServer{stream})
}

type GameDuelService_ServerBroadcastServer interface {
	Send(*GDBroadcastResp) error
	grpc.ServerStream
}

type gameDuelServiceServerBroadcastServer struct {
	grpc.ServerStream
}

func (x *gameDuelServiceServerBroadcastServer) Send(m *GDBroadcastResp) error {
	return x.ServerStream.SendMsg(m)
}

func _GameDuelService_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/CreateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).CreateGame(ctx, req.(*GDCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_GetGameData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).GetGameData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/GetGameData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).GetGameData(ctx, req.(*GDGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_QuitGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).QuitGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/QuitGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).QuitGame(ctx, req.(*GDCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_InstSetEventCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDInstanceDT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).InstSetEventCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/InstSetEventCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).InstSetEventCard(ctx, req.(*GDInstanceDT))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_DrawPhaseConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).DrawPhaseConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/DrawPhaseConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).DrawPhaseConfirm(ctx, req.(*GDGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_MovePhaseConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDMoveConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).MovePhaseConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/MovePhaseConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).MovePhaseConfirm(ctx, req.(*GDMoveConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_MovePhaseResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).MovePhaseResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/MovePhaseResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).MovePhaseResult(ctx, req.(*GDGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_ADPhaseConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDADConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).ADPhaseConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/ADPhaseConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).ADPhaseConfirm(ctx, req.(*GDADConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_ADPhaseResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).ADPhaseResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/ADPhaseResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).ADPhaseResult(ctx, req.(*GDGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_ADPhaseDiceResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).ADPhaseDiceResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/ADPhaseDiceResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).ADPhaseDiceResult(ctx, req.(*GDGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_ChangePhaseConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDChangeConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).ChangePhaseConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/ChangePhaseConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).ChangePhaseConfirm(ctx, req.(*GDChangeConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_ChangePhaseResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).ChangePhaseResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/ChangePhaseResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).ChangePhaseResult(ctx, req.(*GDGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_EventPhaseConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDPhaseConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).EventPhaseConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/EventPhaseConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).EventPhaseConfirm(ctx, req.(*GDPhaseConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameDuelService_EventPhaseResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GDGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameDuelServiceServer).EventPhaseResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.GameDuelService/EventPhaseResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameDuelServiceServer).EventPhaseResult(ctx, req.(*GDGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameDuelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ULZProto.GameDuelService",
	HandlerType: (*GameDuelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGame",
			Handler:    _GameDuelService_CreateGame_Handler,
		},
		{
			MethodName: "GetGameData",
			Handler:    _GameDuelService_GetGameData_Handler,
		},
		{
			MethodName: "QuitGame",
			Handler:    _GameDuelService_QuitGame_Handler,
		},
		{
			MethodName: "InstSetEventCard",
			Handler:    _GameDuelService_InstSetEventCard_Handler,
		},
		{
			MethodName: "DrawPhaseConfirm",
			Handler:    _GameDuelService_DrawPhaseConfirm_Handler,
		},
		{
			MethodName: "MovePhaseConfirm",
			Handler:    _GameDuelService_MovePhaseConfirm_Handler,
		},
		{
			MethodName: "MovePhaseResult",
			Handler:    _GameDuelService_MovePhaseResult_Handler,
		},
		{
			MethodName: "ADPhaseConfirm",
			Handler:    _GameDuelService_ADPhaseConfirm_Handler,
		},
		{
			MethodName: "ADPhaseResult",
			Handler:    _GameDuelService_ADPhaseResult_Handler,
		},
		{
			MethodName: "ADPhaseDiceResult",
			Handler:    _GameDuelService_ADPhaseDiceResult_Handler,
		},
		{
			MethodName: "ChangePhaseConfirm",
			Handler:    _GameDuelService_ChangePhaseConfirm_Handler,
		},
		{
			MethodName: "ChangePhaseResult",
			Handler:    _GameDuelService_ChangePhaseResult_Handler,
		},
		{
			MethodName: "EventPhaseConfirm",
			Handler:    _GameDuelService_EventPhaseConfirm_Handler,
		},
		{
			MethodName: "EventPhaseResult",
			Handler:    _GameDuelService_EventPhaseResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerBroadcast",
			Handler:       _GameDuelService_ServerBroadcast_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
