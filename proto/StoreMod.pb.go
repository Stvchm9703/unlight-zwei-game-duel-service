// Code generated by protoc-gen-go. DO NOT EDIT.
// source: StoreMod.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Move-Phase-SnapMod
type MovePhaseSnapMod struct {
	//  flaging
	Turns                int32        `protobuf:"varint,1,opt,name=turns,proto3" json:"turns,omitempty"`
	HostVal              int32        `protobuf:"varint,2,opt,name=host_val,json=hostVal,proto3" json:"host_val,omitempty"`
	DuelVal              int32        `protobuf:"varint,3,opt,name=duel_val,json=duelVal,proto3" json:"duel_val,omitempty"`
	HostOpt              MovePhaseOpt `protobuf:"varint,4,opt,name=host_opt,json=hostOpt,proto3,enum=ULZProto.MovePhaseOpt" json:"host_opt,omitempty"`
	DuelOpt              MovePhaseOpt `protobuf:"varint,5,opt,name=duel_opt,json=duelOpt,proto3,enum=ULZProto.MovePhaseOpt" json:"duel_opt,omitempty"`
	HostCard             []*EventCard `protobuf:"bytes,6,rep,name=host_card,json=hostCard,proto3" json:"host_card,omitempty"`
	DuelCard             []*EventCard `protobuf:"bytes,7,rep,name=duel_card,json=duelCard,proto3" json:"duel_card,omitempty"`
	HostTrigSkl          []*SkillSet  `protobuf:"bytes,8,rep,name=host_trig_skl,json=hostTrigSkl,proto3" json:"host_trig_skl,omitempty"`
	DuelTrigSkl          []*SkillSet  `protobuf:"bytes,9,rep,name=duel_trig_skl,json=duelTrigSkl,proto3" json:"duel_trig_skl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MovePhaseSnapMod) Reset()         { *m = MovePhaseSnapMod{} }
func (m *MovePhaseSnapMod) String() string { return proto.CompactTextString(m) }
func (*MovePhaseSnapMod) ProtoMessage()    {}
func (*MovePhaseSnapMod) Descriptor() ([]byte, []int) {
	return fileDescriptor_98fa4925a5e51b0e, []int{0}
}

func (m *MovePhaseSnapMod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MovePhaseSnapMod.Unmarshal(m, b)
}
func (m *MovePhaseSnapMod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MovePhaseSnapMod.Marshal(b, m, deterministic)
}
func (m *MovePhaseSnapMod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MovePhaseSnapMod.Merge(m, src)
}
func (m *MovePhaseSnapMod) XXX_Size() int {
	return xxx_messageInfo_MovePhaseSnapMod.Size(m)
}
func (m *MovePhaseSnapMod) XXX_DiscardUnknown() {
	xxx_messageInfo_MovePhaseSnapMod.DiscardUnknown(m)
}

var xxx_messageInfo_MovePhaseSnapMod proto.InternalMessageInfo

func (m *MovePhaseSnapMod) GetTurns() int32 {
	if m != nil {
		return m.Turns
	}
	return 0
}

func (m *MovePhaseSnapMod) GetHostVal() int32 {
	if m != nil {
		return m.HostVal
	}
	return 0
}

func (m *MovePhaseSnapMod) GetDuelVal() int32 {
	if m != nil {
		return m.DuelVal
	}
	return 0
}

func (m *MovePhaseSnapMod) GetHostOpt() MovePhaseOpt {
	if m != nil {
		return m.HostOpt
	}
	return MovePhaseOpt_NO_MOVE
}

func (m *MovePhaseSnapMod) GetDuelOpt() MovePhaseOpt {
	if m != nil {
		return m.DuelOpt
	}
	return MovePhaseOpt_NO_MOVE
}

func (m *MovePhaseSnapMod) GetHostCard() []*EventCard {
	if m != nil {
		return m.HostCard
	}
	return nil
}

func (m *MovePhaseSnapMod) GetDuelCard() []*EventCard {
	if m != nil {
		return m.DuelCard
	}
	return nil
}

func (m *MovePhaseSnapMod) GetHostTrigSkl() []*SkillSet {
	if m != nil {
		return m.HostTrigSkl
	}
	return nil
}

func (m *MovePhaseSnapMod) GetDuelTrigSkl() []*SkillSet {
	if m != nil {
		return m.DuelTrigSkl
	}
	return nil
}

// AD-Phase-SnapMod
type ADPhaseSnapMod struct {
	Turns                int32          `protobuf:"varint,1,opt,name=turns,proto3" json:"turns,omitempty"`
	FirstAttack          PlayerSide     `protobuf:"varint,2,opt,name=first_attack,json=firstAttack,proto3,enum=ULZProto.PlayerSide" json:"first_attack,omitempty"`
	CurrAttacker         PlayerSide     `protobuf:"varint,3,opt,name=curr_attacker,json=currAttacker,proto3,enum=ULZProto.PlayerSide" json:"curr_attacker,omitempty"`
	EventPhase           EventHookPhase `protobuf:"varint,4,opt,name=event_phase,json=eventPhase,proto3,enum=ULZProto.EventHookPhase" json:"event_phase,omitempty"`
	AttackVal            int32          `protobuf:"varint,5,opt,name=attack_val,json=attackVal,proto3" json:"attack_val,omitempty"`
	DefenceVal           int32          `protobuf:"varint,6,opt,name=defence_val,json=defenceVal,proto3" json:"defence_val,omitempty"`
	AttackCard           []*EventCard   `protobuf:"bytes,7,rep,name=attack_card,json=attackCard,proto3" json:"attack_card,omitempty"`
	DefenceCard          []*EventCard   `protobuf:"bytes,8,rep,name=defence_card,json=defenceCard,proto3" json:"defence_card,omitempty"`
	AttackTrigSkl        []*SkillSet    `protobuf:"bytes,9,rep,name=attack_trig_skl,json=attackTrigSkl,proto3" json:"attack_trig_skl,omitempty"`
	DefenceTrigSkl       []*SkillSet    `protobuf:"bytes,10,rep,name=defence_trig_skl,json=defenceTrigSkl,proto3" json:"defence_trig_skl,omitempty"`
	IsProcessed          bool           `protobuf:"varint,11,opt,name=is_processed,json=isProcessed,proto3" json:"is_processed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ADPhaseSnapMod) Reset()         { *m = ADPhaseSnapMod{} }
func (m *ADPhaseSnapMod) String() string { return proto.CompactTextString(m) }
func (*ADPhaseSnapMod) ProtoMessage()    {}
func (*ADPhaseSnapMod) Descriptor() ([]byte, []int) {
	return fileDescriptor_98fa4925a5e51b0e, []int{1}
}

func (m *ADPhaseSnapMod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ADPhaseSnapMod.Unmarshal(m, b)
}
func (m *ADPhaseSnapMod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ADPhaseSnapMod.Marshal(b, m, deterministic)
}
func (m *ADPhaseSnapMod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ADPhaseSnapMod.Merge(m, src)
}
func (m *ADPhaseSnapMod) XXX_Size() int {
	return xxx_messageInfo_ADPhaseSnapMod.Size(m)
}
func (m *ADPhaseSnapMod) XXX_DiscardUnknown() {
	xxx_messageInfo_ADPhaseSnapMod.DiscardUnknown(m)
}

var xxx_messageInfo_ADPhaseSnapMod proto.InternalMessageInfo

func (m *ADPhaseSnapMod) GetTurns() int32 {
	if m != nil {
		return m.Turns
	}
	return 0
}

func (m *ADPhaseSnapMod) GetFirstAttack() PlayerSide {
	if m != nil {
		return m.FirstAttack
	}
	return PlayerSide_HOST
}

func (m *ADPhaseSnapMod) GetCurrAttacker() PlayerSide {
	if m != nil {
		return m.CurrAttacker
	}
	return PlayerSide_HOST
}

func (m *ADPhaseSnapMod) GetEventPhase() EventHookPhase {
	if m != nil {
		return m.EventPhase
	}
	return EventHookPhase_gameset_start
}

func (m *ADPhaseSnapMod) GetAttackVal() int32 {
	if m != nil {
		return m.AttackVal
	}
	return 0
}

func (m *ADPhaseSnapMod) GetDefenceVal() int32 {
	if m != nil {
		return m.DefenceVal
	}
	return 0
}

func (m *ADPhaseSnapMod) GetAttackCard() []*EventCard {
	if m != nil {
		return m.AttackCard
	}
	return nil
}

func (m *ADPhaseSnapMod) GetDefenceCard() []*EventCard {
	if m != nil {
		return m.DefenceCard
	}
	return nil
}

func (m *ADPhaseSnapMod) GetAttackTrigSkl() []*SkillSet {
	if m != nil {
		return m.AttackTrigSkl
	}
	return nil
}

func (m *ADPhaseSnapMod) GetDefenceTrigSkl() []*SkillSet {
	if m != nil {
		return m.DefenceTrigSkl
	}
	return nil
}

func (m *ADPhaseSnapMod) GetIsProcessed() bool {
	if m != nil {
		return m.IsProcessed
	}
	return false
}

// // Effect-Status-SnapMod
type EffectNodeSnapMod struct {
	Turns                int32           `protobuf:"varint,1,opt,name=turns,proto3" json:"turns,omitempty"`
	PendingEf            []*EffectResult `protobuf:"bytes,2,rep,name=pending_ef,json=pendingEf,proto3" json:"pending_ef,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EffectNodeSnapMod) Reset()         { *m = EffectNodeSnapMod{} }
func (m *EffectNodeSnapMod) String() string { return proto.CompactTextString(m) }
func (*EffectNodeSnapMod) ProtoMessage()    {}
func (*EffectNodeSnapMod) Descriptor() ([]byte, []int) {
	return fileDescriptor_98fa4925a5e51b0e, []int{2}
}

func (m *EffectNodeSnapMod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EffectNodeSnapMod.Unmarshal(m, b)
}
func (m *EffectNodeSnapMod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EffectNodeSnapMod.Marshal(b, m, deterministic)
}
func (m *EffectNodeSnapMod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EffectNodeSnapMod.Merge(m, src)
}
func (m *EffectNodeSnapMod) XXX_Size() int {
	return xxx_messageInfo_EffectNodeSnapMod.Size(m)
}
func (m *EffectNodeSnapMod) XXX_DiscardUnknown() {
	xxx_messageInfo_EffectNodeSnapMod.DiscardUnknown(m)
}

var xxx_messageInfo_EffectNodeSnapMod proto.InternalMessageInfo

func (m *EffectNodeSnapMod) GetTurns() int32 {
	if m != nil {
		return m.Turns
	}
	return 0
}

func (m *EffectNodeSnapMod) GetPendingEf() []*EffectResult {
	if m != nil {
		return m.PendingEf
	}
	return nil
}

// PhaseInstance-SnapMod
type PhaseSnapMod struct {
	Turns                int32          `protobuf:"varint,1,opt,name=turns,proto3" json:"turns,omitempty"`
	EventPhase           EventHookPhase `protobuf:"varint,2,opt,name=event_phase,json=eventPhase,proto3,enum=ULZProto.EventHookPhase" json:"event_phase,omitempty"`
	HookType             EventHookType  `protobuf:"varint,3,opt,name=hook_type,json=hookType,proto3,enum=ULZProto.EventHookType" json:"hook_type,omitempty"`
	IsHostReady          bool           `protobuf:"varint,4,opt,name=is_host_ready,json=isHostReady,proto3" json:"is_host_ready,omitempty"`
	IsDuelReady          bool           `protobuf:"varint,5,opt,name=is_duel_ready,json=isDuelReady,proto3" json:"is_duel_ready,omitempty"`
	FirstAttack          PlayerSide     `protobuf:"varint,6,opt,name=first_attack,json=firstAttack,proto3,enum=ULZProto.PlayerSide" json:"first_attack,omitempty"`
	CurrAttack           PlayerSide     `protobuf:"varint,7,opt,name=curr_attack,json=currAttack,proto3,enum=ULZProto.PlayerSide" json:"curr_attack,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PhaseSnapMod) Reset()         { *m = PhaseSnapMod{} }
func (m *PhaseSnapMod) String() string { return proto.CompactTextString(m) }
func (*PhaseSnapMod) ProtoMessage()    {}
func (*PhaseSnapMod) Descriptor() ([]byte, []int) {
	return fileDescriptor_98fa4925a5e51b0e, []int{3}
}

func (m *PhaseSnapMod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhaseSnapMod.Unmarshal(m, b)
}
func (m *PhaseSnapMod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhaseSnapMod.Marshal(b, m, deterministic)
}
func (m *PhaseSnapMod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhaseSnapMod.Merge(m, src)
}
func (m *PhaseSnapMod) XXX_Size() int {
	return xxx_messageInfo_PhaseSnapMod.Size(m)
}
func (m *PhaseSnapMod) XXX_DiscardUnknown() {
	xxx_messageInfo_PhaseSnapMod.DiscardUnknown(m)
}

var xxx_messageInfo_PhaseSnapMod proto.InternalMessageInfo

func (m *PhaseSnapMod) GetTurns() int32 {
	if m != nil {
		return m.Turns
	}
	return 0
}

func (m *PhaseSnapMod) GetEventPhase() EventHookPhase {
	if m != nil {
		return m.EventPhase
	}
	return EventHookPhase_gameset_start
}

func (m *PhaseSnapMod) GetHookType() EventHookType {
	if m != nil {
		return m.HookType
	}
	return EventHookType_Instant
}

func (m *PhaseSnapMod) GetIsHostReady() bool {
	if m != nil {
		return m.IsHostReady
	}
	return false
}

func (m *PhaseSnapMod) GetIsDuelReady() bool {
	if m != nil {
		return m.IsDuelReady
	}
	return false
}

func (m *PhaseSnapMod) GetFirstAttack() PlayerSide {
	if m != nil {
		return m.FirstAttack
	}
	return PlayerSide_HOST
}

func (m *PhaseSnapMod) GetCurrAttack() PlayerSide {
	if m != nil {
		return m.CurrAttack
	}
	return PlayerSide_HOST
}

func init() {
	proto.RegisterType((*MovePhaseSnapMod)(nil), "ULZProto.MovePhaseSnapMod")
	proto.RegisterType((*ADPhaseSnapMod)(nil), "ULZProto.ADPhaseSnapMod")
	proto.RegisterType((*EffectNodeSnapMod)(nil), "ULZProto.EffectNodeSnapMod")
	proto.RegisterType((*PhaseSnapMod)(nil), "ULZProto.PhaseSnapMod")
}

func init() { proto.RegisterFile("StoreMod.proto", fileDescriptor_98fa4925a5e51b0e) }

var fileDescriptor_98fa4925a5e51b0e = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0x95, 0xb4, 0x49, 0x93, 0x71, 0x92, 0xaf, 0xf5, 0x57, 0x81, 0x29, 0x42, 0x84, 0x9c,
	0x72, 0x8a, 0xa0, 0xb4, 0xa0, 0x22, 0x2e, 0x81, 0x56, 0xea, 0xa1, 0xa1, 0x91, 0xd3, 0x72, 0xe8,
	0xc5, 0x2c, 0xd9, 0x71, 0x6b, 0xd9, 0xf2, 0x5a, 0xbb, 0x9b, 0x4a, 0x79, 0x13, 0x8e, 0x9c, 0x79,
	0x17, 0xde, 0x09, 0xed, 0xec, 0x3a, 0xa9, 0x2a, 0xd2, 0x86, 0xdb, 0xee, 0xcc, 0xff, 0xb7, 0xff,
	0xf5, 0xce, 0x8c, 0xa1, 0x33, 0xd1, 0x42, 0xe2, 0x48, 0xf0, 0x41, 0x21, 0x85, 0x16, 0x7e, 0xe3,
	0xf2, 0xec, 0x6a, 0x6c, 0x56, 0x7b, 0x70, 0xcc, 0x34, 0xb3, 0xd1, 0xbd, 0xdd, 0x93, 0x5b, 0xcc,
	0xf5, 0xa9, 0x10, 0xe9, 0xf8, 0x86, 0x29, 0xb4, 0xd1, 0xde, 0x8f, 0x0d, 0xd8, 0x1e, 0x89, 0x5b,
	0xa4, 0xd8, 0x24, 0x67, 0xc5, 0x48, 0x70, 0x7f, 0x17, 0x6a, 0x7a, 0x26, 0x73, 0x15, 0x54, 0xba,
	0x95, 0x7e, 0x2d, 0xb4, 0x1b, 0xff, 0x19, 0x34, 0x6e, 0x84, 0xd2, 0xd1, 0x2d, 0xcb, 0x82, 0x2a,
	0x25, 0xb6, 0xcc, 0xfe, 0x2b, 0xcb, 0x4c, 0x8a, 0xcf, 0x30, 0xa3, 0xd4, 0x86, 0x4d, 0x99, 0xbd,
	0x49, 0xbd, 0x71, 0x94, 0x28, 0x74, 0xb0, 0xd9, 0xad, 0xf4, 0x3b, 0xfb, 0x4f, 0x06, 0xe5, 0xfd,
	0x06, 0x0b, 0xe7, 0xf3, 0x42, 0xdb, 0xd3, 0xce, 0x0b, 0x6d, 0x10, 0x3a, 0xcd, 0x20, 0xb5, 0x87,
	0x11, 0xa3, 0x33, 0xc8, 0x6b, 0x68, 0x92, 0xcb, 0x94, 0x49, 0x1e, 0xd4, 0xbb, 0x1b, 0x7d, 0x6f,
	0xff, 0xff, 0x25, 0x43, 0x5f, 0xfe, 0x99, 0x49, 0x1e, 0xd2, 0x5d, 0xcc, 0xca, 0x10, 0x64, 0x42,
	0xc4, 0xd6, 0x03, 0x84, 0x51, 0x11, 0xf1, 0x0e, 0xda, 0xe4, 0xa1, 0x65, 0x72, 0x1d, 0xa9, 0x34,
	0x0b, 0x1a, 0x44, 0xf9, 0x4b, 0x6a, 0x92, 0x26, 0x59, 0x36, 0x41, 0x1d, 0x7a, 0x46, 0x78, 0x21,
	0x93, 0xeb, 0x49, 0x9a, 0x19, 0x8e, 0x9c, 0x16, 0x5c, 0x73, 0x35, 0x67, 0x84, 0x8e, 0xeb, 0xfd,
	0xdc, 0x84, 0xce, 0xf0, 0x78, 0x8d, 0xc2, 0xbc, 0x87, 0x56, 0x9c, 0x48, 0xa5, 0x23, 0xa6, 0x35,
	0x9b, 0xa6, 0x54, 0x9c, 0xce, 0xfe, 0xee, 0xf2, 0xfc, 0x71, 0xc6, 0xe6, 0x28, 0x27, 0x09, 0xc7,
	0xd0, 0x23, 0xe5, 0x90, 0x84, 0xfe, 0x11, 0xb4, 0xa7, 0x33, 0x29, 0x1d, 0x87, 0x92, 0x6a, 0xb7,
	0x8a, 0x6c, 0x19, 0xe9, 0xd0, 0x29, 0xfd, 0x23, 0xf0, 0xd0, 0xbc, 0x51, 0x54, 0x98, 0xfb, 0xb9,
	0xca, 0x06, 0xf7, 0x1e, 0x70, 0xd1, 0x6c, 0x21, 0x90, 0x98, 0xd6, 0xfe, 0x0b, 0x00, 0x6b, 0x48,
	0xed, 0x52, 0xa3, 0x2f, 0x69, 0xda, 0x88, 0x69, 0x98, 0x97, 0xe0, 0x71, 0x8c, 0x31, 0x9f, 0x22,
	0xe5, 0xeb, 0x94, 0x07, 0x17, 0x32, 0x82, 0x03, 0xf0, 0x1c, 0xff, 0x58, 0xed, 0x9c, 0x8f, 0xab,
	0x5e, 0xab, 0x3c, 0x96, 0xb0, 0xc6, 0x6a, 0xac, 0xf4, 0x27, 0xee, 0x03, 0xfc, 0xe7, 0xdc, 0xd6,
	0xa8, 0x5f, 0xdb, 0x4a, 0xcb, 0xca, 0x7f, 0x84, 0xed, 0xd2, 0x73, 0x01, 0xc3, 0x4a, 0xb8, 0xe3,
	0xb4, 0x25, 0xfd, 0x0a, 0x5a, 0x89, 0x8a, 0x0a, 0x29, 0xa6, 0xa8, 0x14, 0xf2, 0xc0, 0xeb, 0x56,
	0xfa, 0x8d, 0xd0, 0x4b, 0xd4, 0xb8, 0x0c, 0xf5, 0xbe, 0xc1, 0xce, 0x49, 0x1c, 0xe3, 0x54, 0x7f,
	0x11, 0xfc, 0x91, 0x26, 0x39, 0x04, 0x28, 0x30, 0xe7, 0x49, 0x7e, 0x1d, 0x61, 0x1c, 0x54, 0xe9,
	0x16, 0x77, 0xc6, 0xca, 0x1e, 0x13, 0xa2, 0x9a, 0x65, 0x3a, 0x6c, 0x3a, 0xe5, 0x49, 0xdc, 0xfb,
	0x5d, 0x85, 0xd6, 0x1a, 0x2d, 0x78, 0xaf, 0x1d, 0xaa, 0xff, 0xd0, 0x0e, 0x07, 0x66, 0x74, 0x45,
	0x1a, 0xe9, 0x79, 0x81, 0xae, 0x01, 0x9f, 0xfe, 0x05, 0xbc, 0x98, 0x17, 0x68, 0xc6, 0xd7, 0xae,
	0xfc, 0x1e, 0xb4, 0x13, 0x15, 0xd1, 0x3c, 0x4a, 0x64, 0x7c, 0x4e, 0x1d, 0x48, 0xaf, 0x73, 0x2a,
	0x94, 0x0e, 0x4d, 0xc8, 0x69, 0x68, 0xf6, 0xac, 0xa6, 0x56, 0x6a, 0x8e, 0x67, 0x98, 0x59, 0xcd,
	0xfd, 0xd9, 0xa9, 0xaf, 0x3b, 0x3b, 0x87, 0xe0, 0xdd, 0x99, 0x9d, 0x60, 0xeb, 0x01, 0x0e, 0x96,
	0x93, 0xf3, 0xe9, 0xf9, 0x55, 0x8d, 0x7e, 0xbc, 0xbf, 0xaa, 0x3b, 0x97, 0x67, 0x57, 0x43, 0xa5,
	0x50, 0x0f, 0x08, 0x18, 0x09, 0xfe, 0xbd, 0x4e, 0xa9, 0xb7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x51, 0x47, 0x85, 0x32, 0xd1, 0x05, 0x00, 0x00,
}
