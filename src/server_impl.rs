#![allow(unused_imports, dead_code, unreachable_code)]
use std::boxed::Box;
use std::collections::HashMap;
use std::hash::{Hash, Hasher};
use std::pin::Pin;
use std::sync::Arc;
use std::time::Instant;

use futures::{Stream, StreamExt};
use redis::{Client, Commands};
use tokio::sync::mpsc;
use tonic;
use tonic::transport::Server;
use tonic::{Request, Response, Status};

// #[derive(Debug)]
pub mod ulz_proto {
    tonic::include_proto!("ulz_proto");
}

// service.proto : generated by code
use ulz_proto::game_duel_service_server::{GameDuelService, GameDuelServiceServer};

// Data.proto
use ulz_proto::{
    CharCardEquSet, CharCardSet, EffectResult, EventCard, EventCardPos, EventCardType, GameDataSet,
    PlayerSide, RangeType, SignEq, SkillCardCond, SkillSet, StatusEffect, StatusSet,
};

// EventHookPhase.proto
use ulz_proto::{Empty, EventHookPhase, EventHookType};

// message.proto
use ulz_proto::{
    CastCmd, EcShortHand, GdBroadcastResp, GdChangeConfirmReq, GdCreateReq, GdGetInfoReq,
    GdInstanceDt, GdMoveConfirmReq, GdMoveConfirmResp, GdPhaseConfirmReq, GdPhaseConfirmResp,
    GdadConfirmReq, GdadDiceResult, GdadResultResp, MovePhaseOpt,
};

mod ad_phase;
mod basic_func;
mod cache_conn;
mod config;
mod draw_phase;
mod event_phase;
mod instance_ec;
mod move_phase;

pub fn init_with_config(path: &str) -> GameDuelServiceBackend {
    let ymp = config::parse(path);
    println!("{:?}", ymp);
    // let rds = Vec::new();
    loop {
        break;
    }
    let backend = GameDuelServiceBackend {
        rooms: Vec::new(),
        rds_conn: Box::new(redis::Client::open("redis://127.0.0.1:6379").unwrap()),
    };
    return backend;
}

#[tokio::main]
pub async fn run_server() -> Result<(), Box<dyn std::error::Error>> {
    let addr = "[::1]:10000".parse().unwrap();

    println!("RouteGuideServer listening on: {}", addr);

    let backend = GameDuelServiceBackend {
        rooms: Vec::new(),
        rds_conn: Box::new(redis::Client::open("redis://127.0.0.1:6379")?),
    };
    let svc = GameDuelServiceServer::new(backend);
    Server::builder().add_service(svc).serve(addr).await?;

    Ok(())
}

#[derive(Debug)]
pub struct GameDuelServiceBackend {
    rooms: Vec<Box<ulz_proto::GameDataSet>>,
    rds_conn: Box<redis::Client>,
}

#[tonic::async_trait]
impl GameDuelService for GameDuelServiceBackend {
    // -------------------------------------------------------------------------------
    // basic function :
    //      forward to basic_func.rs
    // -------------------------------------------------------------------------------
    async fn create_game(
        &self,
        request: Request<GdCreateReq>,
    ) -> Result<Response<GameDataSet>, tonic::Status> {
        return basic_func::create_game(&self, request);
    }

    async fn get_game_data(
        &self,
        request: Request<GdGetInfoReq>,
    ) -> Result<Response<GameDataSet>, tonic::Status> {
        return basic_func::get_game_data(&self, request);
    }

    async fn quit_game(
        &self,
        request: Request<GdCreateReq>,
    ) -> Result<Response<Empty>, tonic::Status> {
        return basic_func::quit_game(&self, request);
    }

    type ServerBroadcastStream = mpsc::Receiver<Result<GdBroadcastResp, tonic::Status>>;
    async fn server_broadcast(
        &self,
        request: Request<GdGetInfoReq>,
    ) -> Result<Response<Self::ServerBroadcastStream>, tonic::Status> {
        return basic_func::server_broadcast(&self, request);
    }
    // -------------------------------------------------------------------------------
    //  instance get/set event-card:
    //      forward to instance_ec.rs
    // -------------------------------------------------------------------------------
    async fn inst_set_event_card(
        &self,
        request: tonic::Request<GdInstanceDt>,
    ) -> Result<tonic::Response<Empty>, tonic::Status> {
        return instance_ec::inst_set_event_card(&self, request);
    }
    async fn inst_get_event_card(
        &self,
        request: tonic::Request<GdGetInfoReq>,
    ) -> Result<tonic::Response<GdInstanceDt>, tonic::Status> {
        return instance_ec::inst_get_event_card(&self, request);
    }
    // -------------------------------------------------------------------------------
    //   Draw Phase confirm :
    //      forward to draw_phase.rs
    // -------------------------------------------------------------------------------
    async fn draw_phase_confirm(
        &self,
        request: Request<GdGetInfoReq>,
    ) -> Result<Response<Empty>, tonic::Status> {
        return draw_phase::draw_phase_confirm(&self, request);
    }
    // -------------------------------------------------------------------------------
    //  Move Phase :
    //      forward to move_phase.rs
    // -------------------------------------------------------------------------------
    async fn move_phase_confirm(
        &self,
        request: Request<GdMoveConfirmReq>,
    ) -> Result<Response<Empty>, Status> {
        return move_phase::move_phase_confirm(&self, request);
    }
    async fn move_phase_result(
        &self,
        request: Request<GdGetInfoReq>,
    ) -> Result<Response<GdMoveConfirmResp>, Status> {
        return move_phase::move_phase_result(&self, request);
    }
    // -------------------------------------------------------------------------------
    //  Event Phase :
    //      forward to event_phase.rs
    // -------------------------------------------------------------------------------
    async fn event_phase_result(
        &self,
        request: Request<GdGetInfoReq>,
    ) -> Result<Response<GdPhaseConfirmResp>, tonic::Status> {
        return event_phase::event_phase_result(&self, request);
    }
    async fn event_phase_confirm(
        &self,
        request: Request<GdPhaseConfirmReq>,
    ) -> Result<Response<Empty>, tonic::Status> {
        return event_phase::event_phase_confirm(&self, request);
    }
    // -------------------------------------------------------------------------------
    // Atk/Def Phase :
    //      forward to ad_phase.rs
    // -------------------------------------------------------------------------------
    async fn ad_phase_confirm(
        &self,
        request: Request<GdadConfirmReq>,
    ) -> Result<Response<Empty>, Status> {
        return ad_phase::ad_phase_confirm(&self, request);
    }
    async fn ad_phase_result(
        &self,
        request: Request<GdGetInfoReq>,
    ) -> Result<Response<GdadResultResp>, Status> {
        return ad_phase::ad_phase_result(&self, request);
    }

    async fn ad_phase_dice_result(
        &self,
        request: Request<GdGetInfoReq>,
    ) -> Result<Response<GdadDiceResult>, Status> {
        return ad_phase::ad_phase_dice_result(&self, request);
    }
    // -------------------------------------------------------------------------------
    //  Change character phase :
    //      !FIXME  not-impelement
    // -------------------------------------------------------------------------------
    async fn change_phase_confirm(
        &self,
        request: tonic::Request<GdChangeConfirmReq>,
    ) -> Result<tonic::Response<Empty>, tonic::Status> {
        Ok(Response::new(Empty::default()))
    }
    async fn change_phase_result(
        &self,
        request: tonic::Request<GdGetInfoReq>,
    ) -> Result<tonic::Response<Empty>, tonic::Status> {
        Ok(Response::new(Empty::default()))
    }
    // -------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------
}
