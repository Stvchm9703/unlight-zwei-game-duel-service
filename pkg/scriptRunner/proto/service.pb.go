// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x08, 0xf5, 0x89, 0x0a, 0x00,
	0xb1, 0xa4, 0x78, 0x73, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0xa1, 0x12, 0x46, 0xcb, 0x99, 0xb8, 0x84,
	0x82, 0xb3, 0x33, 0x73, 0x72, 0x5c, 0xd3, 0xd2, 0x52, 0x93, 0x4b, 0x82, 0x21, 0xba, 0x84, 0x9c,
	0xb8, 0x78, 0xc1, 0xa2, 0x9e, 0x79, 0xc5, 0x25, 0xce, 0x89, 0x39, 0xc9, 0x42, 0xe2, 0x7a, 0x30,
	0x13, 0xf4, 0x82, 0x5d, 0xc1, 0x52, 0xce, 0x89, 0x39, 0x41, 0xa9, 0x85, 0x52, 0x12, 0xd8, 0x25,
	0x8a, 0x0b, 0x84, 0x9c, 0xb9, 0xf8, 0x60, 0xfc, 0xe4, 0xd2, 0x9c, 0xc4, 0x92, 0x54, 0x72, 0x0c,
	0x71, 0xe3, 0xe2, 0x87, 0xb8, 0x0c, 0x61, 0x0a, 0x8a, 0x62, 0xb8, 0x24, 0xc8, 0x18, 0x49, 0x1c,
	0x32, 0xc5, 0x05, 0x42, 0x0e, 0x5c, 0xbc, 0x2e, 0x99, 0xc9, 0xa9, 0x08, 0x53, 0xc4, 0x90, 0xd5,
	0x42, 0xa5, 0x40, 0x66, 0x88, 0x63, 0x15, 0x2f, 0x2e, 0x70, 0x92, 0x8e, 0x62, 0x05, 0x07, 0xd9,
	0x2a, 0x26, 0xc1, 0x50, 0x9f, 0x28, 0xc7, 0xe2, 0xe2, 0xd4, 0x12, 0x3d, 0xb0, 0x3a, 0xdf, 0xfc,
	0x94, 0x24, 0x36, 0xb0, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xe9, 0x96, 0x1d, 0x77,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SkillEffectServiceClient is the client API for SkillEffectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SkillEffectServiceClient interface {
	//  Basic Server Function
	SkillInstCalc(ctx context.Context, in *SESkillCalReq, opts ...grpc.CallOption) (*SESkillCalResp, error)
	SkillCalculate(ctx context.Context, in *SESkillCalReq, opts ...grpc.CallOption) (*SESkillCalResp, error)
	EffectCalculate(ctx context.Context, in *SEEffectCalReq, opts ...grpc.CallOption) (*SEEffectCalResp, error)
	DiceCalculate(ctx context.Context, in *SEDiceCalReq, opts ...grpc.CallOption) (*SEDiceCalResp, error)
}

type skillEffectServiceClient struct {
	cc *grpc.ClientConn
}

func NewSkillEffectServiceClient(cc *grpc.ClientConn) SkillEffectServiceClient {
	return &skillEffectServiceClient{cc}
}

func (c *skillEffectServiceClient) SkillInstCalc(ctx context.Context, in *SESkillCalReq, opts ...grpc.CallOption) (*SESkillCalResp, error) {
	out := new(SESkillCalResp)
	err := c.cc.Invoke(ctx, "/ULZProto.SkillEffectService/SkillInstCalc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillEffectServiceClient) SkillCalculate(ctx context.Context, in *SESkillCalReq, opts ...grpc.CallOption) (*SESkillCalResp, error) {
	out := new(SESkillCalResp)
	err := c.cc.Invoke(ctx, "/ULZProto.SkillEffectService/SkillCalculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillEffectServiceClient) EffectCalculate(ctx context.Context, in *SEEffectCalReq, opts ...grpc.CallOption) (*SEEffectCalResp, error) {
	out := new(SEEffectCalResp)
	err := c.cc.Invoke(ctx, "/ULZProto.SkillEffectService/EffectCalculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillEffectServiceClient) DiceCalculate(ctx context.Context, in *SEDiceCalReq, opts ...grpc.CallOption) (*SEDiceCalResp, error) {
	out := new(SEDiceCalResp)
	err := c.cc.Invoke(ctx, "/ULZProto.SkillEffectService/DiceCalculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SkillEffectServiceServer is the server API for SkillEffectService service.
type SkillEffectServiceServer interface {
	//  Basic Server Function
	SkillInstCalc(context.Context, *SESkillCalReq) (*SESkillCalResp, error)
	SkillCalculate(context.Context, *SESkillCalReq) (*SESkillCalResp, error)
	EffectCalculate(context.Context, *SEEffectCalReq) (*SEEffectCalResp, error)
	DiceCalculate(context.Context, *SEDiceCalReq) (*SEDiceCalResp, error)
}

// UnimplementedSkillEffectServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSkillEffectServiceServer struct {
}

func (*UnimplementedSkillEffectServiceServer) SkillInstCalc(ctx context.Context, req *SESkillCalReq) (*SESkillCalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkillInstCalc not implemented")
}
func (*UnimplementedSkillEffectServiceServer) SkillCalculate(ctx context.Context, req *SESkillCalReq) (*SESkillCalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkillCalculate not implemented")
}
func (*UnimplementedSkillEffectServiceServer) EffectCalculate(ctx context.Context, req *SEEffectCalReq) (*SEEffectCalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EffectCalculate not implemented")
}
func (*UnimplementedSkillEffectServiceServer) DiceCalculate(ctx context.Context, req *SEDiceCalReq) (*SEDiceCalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiceCalculate not implemented")
}

func RegisterSkillEffectServiceServer(s *grpc.Server, srv SkillEffectServiceServer) {
	s.RegisterService(&_SkillEffectService_serviceDesc, srv)
}

func _SkillEffectService_SkillInstCalc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SESkillCalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillEffectServiceServer).SkillInstCalc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.SkillEffectService/SkillInstCalc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillEffectServiceServer).SkillInstCalc(ctx, req.(*SESkillCalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillEffectService_SkillCalculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SESkillCalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillEffectServiceServer).SkillCalculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.SkillEffectService/SkillCalculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillEffectServiceServer).SkillCalculate(ctx, req.(*SESkillCalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillEffectService_EffectCalculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SEEffectCalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillEffectServiceServer).EffectCalculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.SkillEffectService/EffectCalculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillEffectServiceServer).EffectCalculate(ctx, req.(*SEEffectCalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillEffectService_DiceCalculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SEDiceCalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillEffectServiceServer).DiceCalculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.SkillEffectService/DiceCalculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillEffectServiceServer).DiceCalculate(ctx, req.(*SEDiceCalReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SkillEffectService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ULZProto.SkillEffectService",
	HandlerType: (*SkillEffectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SkillInstCalc",
			Handler:    _SkillEffectService_SkillInstCalc_Handler,
		},
		{
			MethodName: "SkillCalculate",
			Handler:    _SkillEffectService_SkillCalculate_Handler,
		},
		{
			MethodName: "EffectCalculate",
			Handler:    _SkillEffectService_EffectCalculate_Handler,
		},
		{
			MethodName: "DiceCalculate",
			Handler:    _SkillEffectService_DiceCalculate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
